-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel_sobel_Pipeline_VITIS_LOOP_118_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    WindowBuffer_13 : IN STD_LOGIC_VECTOR (7 downto 0);
    WindowBuffer_14 : IN STD_LOGIC_VECTOR (7 downto 0);
    WindowBuffer_12 : IN STD_LOGIC_VECTOR (7 downto 0);
    WindowBuffer_17 : IN STD_LOGIC_VECTOR (7 downto 0);
    WindowBuffer_15 : IN STD_LOGIC_VECTOR (7 downto 0);
    WindowBuffer_16 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_p_strb_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    cols : IN STD_LOGIC_VECTOR (31 downto 0);
    LineBuffer_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    LineBuffer_ce0 : OUT STD_LOGIC;
    LineBuffer_we0 : OUT STD_LOGIC;
    LineBuffer_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    LineBuffer_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    LineBuffer_ce1 : OUT STD_LOGIC;
    LineBuffer_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    LineBuffer_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    LineBuffer_1_ce0 : OUT STD_LOGIC;
    LineBuffer_1_we0 : OUT STD_LOGIC;
    LineBuffer_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    LineBuffer_1_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    LineBuffer_1_ce1 : OUT STD_LOGIC;
    LineBuffer_1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    LineBuffer_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    LineBuffer_2_ce0 : OUT STD_LOGIC;
    LineBuffer_2_we0 : OUT STD_LOGIC;
    LineBuffer_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    LineBuffer_2_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    LineBuffer_2_ce1 : OUT STD_LOGIC;
    LineBuffer_2_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    top : IN STD_LOGIC_VECTOR (1 downto 0);
    mid : IN STD_LOGIC_VECTOR (1 downto 0);
    btm : IN STD_LOGIC_VECTOR (1 downto 0);
    sub : IN STD_LOGIC_VECTOR (31 downto 0);
    cmp_i_i80 : IN STD_LOGIC_VECTOR (0 downto 0);
    dst_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_TVALID : OUT STD_LOGIC;
    dst_TREADY : IN STD_LOGIC;
    dst_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    src_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    src_TVALID : IN STD_LOGIC;
    src_TREADY : OUT STD_LOGIC;
    src_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    zext_ln98 : IN STD_LOGIC_VECTOR (12 downto 0);
    rows : IN STD_LOGIC_VECTOR (30 downto 0);
    WindowBuffer_21_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    WindowBuffer_21_out_ap_vld : OUT STD_LOGIC;
    WindowBuffer_23_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    WindowBuffer_23_out_ap_vld : OUT STD_LOGIC;
    WindowBuffer_19_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    WindowBuffer_19_out_ap_vld : OUT STD_LOGIC;
    WindowBuffer_22_out_i : IN STD_LOGIC_VECTOR (7 downto 0);
    WindowBuffer_22_out_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    WindowBuffer_22_out_o_ap_vld : OUT STD_LOGIC;
    WindowBuffer_18_out_i : IN STD_LOGIC_VECTOR (7 downto 0);
    WindowBuffer_18_out_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    WindowBuffer_18_out_o_ap_vld : OUT STD_LOGIC;
    WindowBuffer_20_out_i : IN STD_LOGIC_VECTOR (7 downto 0);
    WindowBuffer_20_out_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    WindowBuffer_20_out_o_ap_vld : OUT STD_LOGIC;
    data_p_strb_4_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    data_p_strb_4_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of sobel_sobel_Pipeline_VITIS_LOOP_118_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dst_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal src_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln118_reg_1032 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i126_reg_1021 : STD_LOGIC_VECTOR (0 downto 0);
    signal btm_read_read_fu_202_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal cmp_i_i126_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_reg_1025 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_predicate_op74_read_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal col_reg_1025_pp0_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln118_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln118_reg_1032_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln118_reg_1032_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal data_p_last_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_p_last_reg_1036 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_p_last_reg_1036_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal data_p_last_reg_1036_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal data_p_last_reg_1036_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal data_p_last_reg_1036_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal data_p_strb_4_reg_1041 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal data_p_strb_4_reg_1041_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal data_p_strb_4_reg_1041_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal WindowBuffer_19_load_reg_1061 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal WindowBuffer_23_load_reg_1066 : STD_LOGIC_VECTOR (7 downto 0);
    signal WindowBuffer_21_load_reg_1071 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_554_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_1076 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_592_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_1081 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln13_fu_665_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln13_reg_1086 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln18_fu_671_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln18_reg_1091 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_pix_6_fu_717_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_pix_6_reg_1096 : STD_LOGIC_VECTOR (10 downto 0);
    signal g_x_fu_828_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal g_x_reg_1101 : STD_LOGIC_VECTOR (7 downto 0);
    signal g_y_fu_895_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal g_y_reg_1107 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter3_state5 : STD_LOGIC;
    signal zext_ln128_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln125_fu_513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln130_fu_527_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal col_2_fu_158 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal col_3_fu_475_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal data_p_strb_fu_162 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal WindowBuffer_19_fu_166 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal WindowBuffer_23_fu_170 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal WindowBuffer_21_fu_174 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_1_fu_573_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001_grp1 : BOOLEAN;
    signal LineBuffer_1_we0_local : STD_LOGIC;
    signal LineBuffer_1_d0_local : STD_LOGIC_VECTOR (7 downto 0);
    signal LineBuffer_1_ce0_local : STD_LOGIC;
    signal LineBuffer_1_address0_local : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_1_ce1_local : STD_LOGIC;
    signal LineBuffer_we0_local : STD_LOGIC;
    signal LineBuffer_d0_local : STD_LOGIC_VECTOR (7 downto 0);
    signal LineBuffer_ce0_local : STD_LOGIC;
    signal LineBuffer_address0_local : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_ce1_local : STD_LOGIC;
    signal LineBuffer_2_we0_local : STD_LOGIC;
    signal LineBuffer_2_d0_local : STD_LOGIC_VECTOR (7 downto 0);
    signal LineBuffer_2_ce0_local : STD_LOGIC;
    signal LineBuffer_2_address0_local : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_2_ce1_local : STD_LOGIC;
    signal zext_ln98_cast_fu_410_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_cast_fu_406_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln118_fu_466_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln141_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_554_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_573_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_592_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal M00_fu_611_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal M01_fu_623_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln14_3_fu_643_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln15_1_fu_651_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln13_1_fu_655_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln13_1_fu_661_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln11_fu_619_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln12_fu_631_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln14_1_fu_635_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal M00_1_fu_677_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal M01_1_fu_689_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln34_fu_697_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln33_fu_685_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal S00_fu_701_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln35_fu_707_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln15_fu_647_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal A00_fu_711_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln14_2_fu_639_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln13_fu_756_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln16_fu_762_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln18_fu_771_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_pix_5_fu_765_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_pix_fu_774_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_788_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_780_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln28_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_fu_822_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_fu_814_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_fu_804_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_pix_7_fu_836_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln14_fu_759_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_pix_4_fu_841_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_fu_855_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_847_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_fu_875_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_fu_865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_fu_889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_fu_881_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln50_fu_871_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln59_fu_903_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln59_1_fu_906_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal temp_fu_913_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_fu_919_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sobel_1_fu_909_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_701 : BOOLEAN;
    signal ap_condition_705 : BOOLEAN;
    signal ap_condition_708 : BOOLEAN;
    signal tmp_fu_554_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_554_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_554_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_573_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_573_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_573_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_592_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_592_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_592_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component sobel_sparsemux_7_2_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        def : IN STD_LOGIC_VECTOR (7 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sparsemux_7_2_8_1_1_U9 : component sobel_sparsemux_7_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 8,
        CASE1 => "01",
        din1_WIDTH => 8,
        CASE2 => "10",
        din2_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => LineBuffer_q1,
        din1 => LineBuffer_1_q1,
        din2 => LineBuffer_2_q1,
        def => tmp_fu_554_p7,
        sel => top,
        dout => tmp_fu_554_p9);

    sparsemux_7_2_8_1_1_U10 : component sobel_sparsemux_7_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 8,
        CASE1 => "01",
        din1_WIDTH => 8,
        CASE2 => "10",
        din2_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => LineBuffer_q1,
        din1 => LineBuffer_1_q1,
        din2 => LineBuffer_2_q1,
        def => tmp_1_fu_573_p7,
        sel => mid,
        dout => tmp_1_fu_573_p9);

    sparsemux_7_2_8_1_1_U11 : component sobel_sparsemux_7_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 8,
        CASE1 => "01",
        din1_WIDTH => 8,
        CASE2 => "10",
        din2_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => LineBuffer_q1,
        din1 => LineBuffer_1_q1,
        din2 => LineBuffer_2_q1,
        def => tmp_2_fu_592_p7,
        sel => btm,
        dout => tmp_2_fu_592_p9);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter3_state5)) then 
                        ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter2;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    WindowBuffer_19_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                WindowBuffer_19_fu_166 <= WindowBuffer_12;
            elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln118_reg_1032_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
                WindowBuffer_19_fu_166 <= tmp_fu_554_p9;
            end if; 
        end if;
    end process;

    WindowBuffer_21_fu_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                WindowBuffer_21_fu_174 <= WindowBuffer_13;
            elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln118_reg_1032_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
                WindowBuffer_21_fu_174 <= tmp_1_fu_573_p9;
            end if; 
        end if;
    end process;

    WindowBuffer_23_fu_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                WindowBuffer_23_fu_170 <= WindowBuffer_14;
            elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln118_reg_1032_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
                WindowBuffer_23_fu_170 <= tmp_2_fu_592_p9;
            end if; 
        end if;
    end process;

    col_2_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                col_2_fu_158 <= ap_const_lv13_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln118_fu_470_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                col_2_fu_158 <= col_3_fu_475_p2;
            end if; 
        end if;
    end process;

    data_p_strb_fu_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                data_p_strb_fu_162 <= data_p_strb_2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (cmp_i_i126_reg_1021 = ap_const_lv1_1) and (icmp_ln118_reg_1032 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
                data_p_strb_fu_162 <= src_TSTRB;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then
                WindowBuffer_19_load_reg_1061 <= WindowBuffer_19_fu_166;
                WindowBuffer_21_load_reg_1071 <= WindowBuffer_21_fu_174;
                WindowBuffer_23_load_reg_1066 <= WindowBuffer_23_fu_170;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                add_ln13_reg_1086 <= add_ln13_fu_665_p2;
                add_ln18_reg_1091 <= add_ln18_fu_671_p2;
                data_p_strb_4_reg_1041 <= data_p_strb_fu_162;
                data_p_strb_4_reg_1041_pp0_iter3_reg <= data_p_strb_4_reg_1041;
                data_p_strb_4_reg_1041_pp0_iter4_reg <= data_p_strb_4_reg_1041_pp0_iter3_reg;
                g_x_reg_1101 <= g_x_fu_828_p3;
                g_y_reg_1107 <= g_y_fu_895_p3;
                out_pix_6_reg_1096 <= out_pix_6_fu_717_p2;
                tmp_2_reg_1081 <= tmp_2_fu_592_p9;
                tmp_reg_1076 <= tmp_fu_554_p9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                cmp_i_i126_reg_1021 <= cmp_i_i126_fu_414_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                col_reg_1025 <= col_2_fu_158;
                col_reg_1025_pp0_iter1_reg <= col_reg_1025;
                data_p_last_reg_1036 <= data_p_last_fu_486_p2;
                data_p_last_reg_1036_pp0_iter1_reg <= data_p_last_reg_1036;
                icmp_ln118_reg_1032 <= icmp_ln118_fu_470_p2;
                icmp_ln118_reg_1032_pp0_iter1_reg <= icmp_ln118_reg_1032;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                data_p_last_reg_1036_pp0_iter2_reg <= data_p_last_reg_1036_pp0_iter1_reg;
                data_p_last_reg_1036_pp0_iter3_reg <= data_p_last_reg_1036_pp0_iter2_reg;
                data_p_last_reg_1036_pp0_iter4_reg <= data_p_last_reg_1036_pp0_iter3_reg;
                icmp_ln118_reg_1032_pp0_iter2_reg <= icmp_ln118_reg_1032_pp0_iter1_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    A00_fu_711_p2 <= std_logic_vector(signed(sext_ln35_fu_707_p1) + signed(zext_ln15_fu_647_p1));
    LineBuffer_1_address0 <= LineBuffer_1_address0_local;

    LineBuffer_1_address0_local_assign_proc : process(cmp_i_i126_reg_1021, zext_ln128_fu_496_p1, zext_ln125_fu_513_p1, ap_condition_701)
    begin
        if ((ap_const_boolean_1 = ap_condition_701)) then
            if ((cmp_i_i126_reg_1021 = ap_const_lv1_1)) then 
                LineBuffer_1_address0_local <= zext_ln125_fu_513_p1(11 - 1 downto 0);
            elsif ((cmp_i_i126_reg_1021 = ap_const_lv1_0)) then 
                LineBuffer_1_address0_local <= zext_ln128_fu_496_p1(11 - 1 downto 0);
            else 
                LineBuffer_1_address0_local <= "XXXXXXXXXXX";
            end if;
        else 
            LineBuffer_1_address0_local <= "XXXXXXXXXXX";
        end if; 
    end process;

    LineBuffer_1_address1 <= zext_ln130_fu_527_p1(11 - 1 downto 0);
    LineBuffer_1_ce0 <= LineBuffer_1_ce0_local;

    LineBuffer_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln118_reg_1032, cmp_i_i126_reg_1021, btm_read_read_fu_202_p2, ap_block_pp0_stage0_11001_grp1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (btm_read_read_fu_202_p2 = ap_const_lv2_1) and (cmp_i_i126_reg_1021 = ap_const_lv1_0) and (icmp_ln118_reg_1032 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (btm_read_read_fu_202_p2 = ap_const_lv2_1) and (cmp_i_i126_reg_1021 = ap_const_lv1_1) and (icmp_ln118_reg_1032 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)))) then 
            LineBuffer_1_ce0_local <= ap_const_logic_1;
        else 
            LineBuffer_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    LineBuffer_1_ce1 <= LineBuffer_1_ce1_local;

    LineBuffer_1_ce1_local_assign_proc : process(ap_block_pp0_stage0_11001_grp1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            LineBuffer_1_ce1_local <= ap_const_logic_1;
        else 
            LineBuffer_1_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    LineBuffer_1_d0 <= LineBuffer_1_d0_local;

    LineBuffer_1_d0_local_assign_proc : process(src_TDATA, cmp_i_i126_reg_1021, ap_condition_701)
    begin
        if ((ap_const_boolean_1 = ap_condition_701)) then
            if ((cmp_i_i126_reg_1021 = ap_const_lv1_1)) then 
                LineBuffer_1_d0_local <= src_TDATA;
            elsif ((cmp_i_i126_reg_1021 = ap_const_lv1_0)) then 
                LineBuffer_1_d0_local <= ap_const_lv8_0;
            else 
                LineBuffer_1_d0_local <= "XXXXXXXX";
            end if;
        else 
            LineBuffer_1_d0_local <= "XXXXXXXX";
        end if; 
    end process;

    LineBuffer_1_we0 <= LineBuffer_1_we0_local;

    LineBuffer_1_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln118_reg_1032, cmp_i_i126_reg_1021, btm_read_read_fu_202_p2, ap_block_pp0_stage0_11001_grp1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (btm_read_read_fu_202_p2 = ap_const_lv2_1) and (cmp_i_i126_reg_1021 = ap_const_lv1_0) and (icmp_ln118_reg_1032 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (btm_read_read_fu_202_p2 = ap_const_lv2_1) and (cmp_i_i126_reg_1021 = ap_const_lv1_1) and (icmp_ln118_reg_1032 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)))) then 
            LineBuffer_1_we0_local <= ap_const_logic_1;
        else 
            LineBuffer_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    LineBuffer_2_address0 <= LineBuffer_2_address0_local;

    LineBuffer_2_address0_local_assign_proc : process(cmp_i_i126_reg_1021, zext_ln128_fu_496_p1, zext_ln125_fu_513_p1, ap_condition_705)
    begin
        if ((ap_const_boolean_1 = ap_condition_705)) then
            if ((cmp_i_i126_reg_1021 = ap_const_lv1_1)) then 
                LineBuffer_2_address0_local <= zext_ln125_fu_513_p1(11 - 1 downto 0);
            elsif ((cmp_i_i126_reg_1021 = ap_const_lv1_0)) then 
                LineBuffer_2_address0_local <= zext_ln128_fu_496_p1(11 - 1 downto 0);
            else 
                LineBuffer_2_address0_local <= "XXXXXXXXXXX";
            end if;
        else 
            LineBuffer_2_address0_local <= "XXXXXXXXXXX";
        end if; 
    end process;

    LineBuffer_2_address1 <= zext_ln130_fu_527_p1(11 - 1 downto 0);
    LineBuffer_2_ce0 <= LineBuffer_2_ce0_local;

    LineBuffer_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln118_reg_1032, cmp_i_i126_reg_1021, btm_read_read_fu_202_p2, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((not((btm_read_read_fu_202_p2 = ap_const_lv2_0)) and not((btm_read_read_fu_202_p2 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (cmp_i_i126_reg_1021 = ap_const_lv1_0) and (icmp_ln118_reg_1032 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) or (not((btm_read_read_fu_202_p2 = ap_const_lv2_0)) and not((btm_read_read_fu_202_p2 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (cmp_i_i126_reg_1021 = ap_const_lv1_1) and (icmp_ln118_reg_1032 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)))) then 
            LineBuffer_2_ce0_local <= ap_const_logic_1;
        else 
            LineBuffer_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    LineBuffer_2_ce1 <= LineBuffer_2_ce1_local;

    LineBuffer_2_ce1_local_assign_proc : process(ap_block_pp0_stage0_11001_grp1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            LineBuffer_2_ce1_local <= ap_const_logic_1;
        else 
            LineBuffer_2_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    LineBuffer_2_d0 <= LineBuffer_2_d0_local;

    LineBuffer_2_d0_local_assign_proc : process(src_TDATA, cmp_i_i126_reg_1021, ap_condition_705)
    begin
        if ((ap_const_boolean_1 = ap_condition_705)) then
            if ((cmp_i_i126_reg_1021 = ap_const_lv1_1)) then 
                LineBuffer_2_d0_local <= src_TDATA;
            elsif ((cmp_i_i126_reg_1021 = ap_const_lv1_0)) then 
                LineBuffer_2_d0_local <= ap_const_lv8_0;
            else 
                LineBuffer_2_d0_local <= "XXXXXXXX";
            end if;
        else 
            LineBuffer_2_d0_local <= "XXXXXXXX";
        end if; 
    end process;

    LineBuffer_2_we0 <= LineBuffer_2_we0_local;

    LineBuffer_2_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln118_reg_1032, cmp_i_i126_reg_1021, btm_read_read_fu_202_p2, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((not((btm_read_read_fu_202_p2 = ap_const_lv2_0)) and not((btm_read_read_fu_202_p2 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (cmp_i_i126_reg_1021 = ap_const_lv1_0) and (icmp_ln118_reg_1032 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) or (not((btm_read_read_fu_202_p2 = ap_const_lv2_0)) and not((btm_read_read_fu_202_p2 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (cmp_i_i126_reg_1021 = ap_const_lv1_1) and (icmp_ln118_reg_1032 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)))) then 
            LineBuffer_2_we0_local <= ap_const_logic_1;
        else 
            LineBuffer_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    LineBuffer_address0 <= LineBuffer_address0_local;

    LineBuffer_address0_local_assign_proc : process(cmp_i_i126_reg_1021, zext_ln128_fu_496_p1, zext_ln125_fu_513_p1, ap_condition_708)
    begin
        if ((ap_const_boolean_1 = ap_condition_708)) then
            if ((cmp_i_i126_reg_1021 = ap_const_lv1_1)) then 
                LineBuffer_address0_local <= zext_ln125_fu_513_p1(11 - 1 downto 0);
            elsif ((cmp_i_i126_reg_1021 = ap_const_lv1_0)) then 
                LineBuffer_address0_local <= zext_ln128_fu_496_p1(11 - 1 downto 0);
            else 
                LineBuffer_address0_local <= "XXXXXXXXXXX";
            end if;
        else 
            LineBuffer_address0_local <= "XXXXXXXXXXX";
        end if; 
    end process;

    LineBuffer_address1 <= zext_ln130_fu_527_p1(11 - 1 downto 0);
    LineBuffer_ce0 <= LineBuffer_ce0_local;

    LineBuffer_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln118_reg_1032, cmp_i_i126_reg_1021, btm_read_read_fu_202_p2, ap_block_pp0_stage0_11001_grp1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (btm_read_read_fu_202_p2 = ap_const_lv2_0) and (cmp_i_i126_reg_1021 = ap_const_lv1_0) and (icmp_ln118_reg_1032 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (btm_read_read_fu_202_p2 = ap_const_lv2_0) and (cmp_i_i126_reg_1021 = ap_const_lv1_1) and (icmp_ln118_reg_1032 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)))) then 
            LineBuffer_ce0_local <= ap_const_logic_1;
        else 
            LineBuffer_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    LineBuffer_ce1 <= LineBuffer_ce1_local;

    LineBuffer_ce1_local_assign_proc : process(ap_block_pp0_stage0_11001_grp1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            LineBuffer_ce1_local <= ap_const_logic_1;
        else 
            LineBuffer_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    LineBuffer_d0 <= LineBuffer_d0_local;

    LineBuffer_d0_local_assign_proc : process(src_TDATA, cmp_i_i126_reg_1021, ap_condition_708)
    begin
        if ((ap_const_boolean_1 = ap_condition_708)) then
            if ((cmp_i_i126_reg_1021 = ap_const_lv1_1)) then 
                LineBuffer_d0_local <= src_TDATA;
            elsif ((cmp_i_i126_reg_1021 = ap_const_lv1_0)) then 
                LineBuffer_d0_local <= ap_const_lv8_0;
            else 
                LineBuffer_d0_local <= "XXXXXXXX";
            end if;
        else 
            LineBuffer_d0_local <= "XXXXXXXX";
        end if; 
    end process;

    LineBuffer_we0 <= LineBuffer_we0_local;

    LineBuffer_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln118_reg_1032, cmp_i_i126_reg_1021, btm_read_read_fu_202_p2, ap_block_pp0_stage0_11001_grp1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (btm_read_read_fu_202_p2 = ap_const_lv2_0) and (cmp_i_i126_reg_1021 = ap_const_lv1_0) and (icmp_ln118_reg_1032 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (btm_read_read_fu_202_p2 = ap_const_lv2_0) and (cmp_i_i126_reg_1021 = ap_const_lv1_1) and (icmp_ln118_reg_1032 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)))) then 
            LineBuffer_we0_local <= ap_const_logic_1;
        else 
            LineBuffer_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    M00_1_fu_677_p3 <= (WindowBuffer_19_fu_166 & ap_const_lv1_0);
    M00_fu_611_p3 <= (WindowBuffer_20_out_i & ap_const_lv1_0);
    M01_1_fu_689_p3 <= (WindowBuffer_23_fu_170 & ap_const_lv1_0);
    M01_fu_623_p3 <= (tmp_1_fu_573_p9 & ap_const_lv1_0);
    S00_fu_701_p2 <= std_logic_vector(unsigned(zext_ln34_fu_697_p1) - unsigned(zext_ln33_fu_685_p1));

    WindowBuffer_18_out_o_assign_proc : process(ap_CS_fsm_state1, WindowBuffer_15, WindowBuffer_18_out_i, ap_block_pp0_stage0_grp1, icmp_ln118_reg_1032_pp0_iter2_reg, ap_enable_reg_pp0_iter3, WindowBuffer_19_fu_166)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            WindowBuffer_18_out_o <= WindowBuffer_15;
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln118_reg_1032_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1))) then 
            WindowBuffer_18_out_o <= WindowBuffer_19_fu_166;
        else 
            WindowBuffer_18_out_o <= WindowBuffer_18_out_i;
        end if; 
    end process;


    WindowBuffer_18_out_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln118_reg_1032_pp0_iter2_reg, ap_block_pp0_stage0_11001_grp1, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln118_reg_1032_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)))) then 
            WindowBuffer_18_out_o_ap_vld <= ap_const_logic_1;
        else 
            WindowBuffer_18_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    WindowBuffer_19_out <= WindowBuffer_19_load_reg_1061;

    WindowBuffer_19_out_ap_vld_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            WindowBuffer_19_out_ap_vld <= ap_const_logic_1;
        else 
            WindowBuffer_19_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    WindowBuffer_20_out_o_assign_proc : process(ap_CS_fsm_state1, WindowBuffer_16, WindowBuffer_20_out_i, ap_block_pp0_stage0_grp1, icmp_ln118_reg_1032_pp0_iter2_reg, ap_enable_reg_pp0_iter3, WindowBuffer_21_fu_174)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            WindowBuffer_20_out_o <= WindowBuffer_16;
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln118_reg_1032_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1))) then 
            WindowBuffer_20_out_o <= WindowBuffer_21_fu_174;
        else 
            WindowBuffer_20_out_o <= WindowBuffer_20_out_i;
        end if; 
    end process;


    WindowBuffer_20_out_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln118_reg_1032_pp0_iter2_reg, ap_block_pp0_stage0_11001_grp1, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln118_reg_1032_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)))) then 
            WindowBuffer_20_out_o_ap_vld <= ap_const_logic_1;
        else 
            WindowBuffer_20_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    WindowBuffer_21_out <= WindowBuffer_21_load_reg_1071;

    WindowBuffer_21_out_ap_vld_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            WindowBuffer_21_out_ap_vld <= ap_const_logic_1;
        else 
            WindowBuffer_21_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    WindowBuffer_22_out_o_assign_proc : process(ap_CS_fsm_state1, WindowBuffer_17, WindowBuffer_22_out_i, ap_block_pp0_stage0_grp1, icmp_ln118_reg_1032_pp0_iter2_reg, ap_enable_reg_pp0_iter3, WindowBuffer_23_fu_170)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            WindowBuffer_22_out_o <= WindowBuffer_17;
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln118_reg_1032_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1))) then 
            WindowBuffer_22_out_o <= WindowBuffer_23_fu_170;
        else 
            WindowBuffer_22_out_o <= WindowBuffer_22_out_i;
        end if; 
    end process;


    WindowBuffer_22_out_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln118_reg_1032_pp0_iter2_reg, ap_block_pp0_stage0_11001_grp1, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln118_reg_1032_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)))) then 
            WindowBuffer_22_out_o_ap_vld <= ap_const_logic_1;
        else 
            WindowBuffer_22_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    WindowBuffer_23_out <= WindowBuffer_23_load_reg_1066;

    WindowBuffer_23_out_ap_vld_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            WindowBuffer_23_out_ap_vld <= ap_const_logic_1;
        else 
            WindowBuffer_23_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln13_1_fu_655_p2 <= std_logic_vector(unsigned(zext_ln14_3_fu_643_p1) + unsigned(zext_ln15_1_fu_651_p1));
    add_ln13_fu_665_p2 <= std_logic_vector(unsigned(zext_ln13_1_fu_661_p1) + unsigned(zext_ln11_fu_619_p1));
    add_ln18_fu_671_p2 <= std_logic_vector(unsigned(zext_ln12_fu_631_p1) + unsigned(zext_ln14_1_fu_635_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(2);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_grp1_assign_proc : process(dst_TREADY, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter1, ap_block_state3_pp0_stage0_iter1_grp1)
    begin
                ap_block_pp0_stage0_01001_grp1 <= (((dst_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter1_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(dst_TREADY, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter1, ap_block_state3_pp0_stage0_iter1_grp1)
    begin
                ap_block_pp0_stage0_11001 <= (((dst_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter1_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_grp1_assign_proc : process(dst_TREADY, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter1, ap_block_state3_pp0_stage0_iter1_grp1)
    begin
                ap_block_pp0_stage0_11001_grp1 <= (((dst_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter1_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(dst_TREADY, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter1, ap_block_state3_pp0_stage0_iter1_grp1)
    begin
                ap_block_pp0_stage0_subdone <= (((dst_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter1_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state3_pp0_stage0_iter1_grp1_assign_proc : process(src_TVALID, ap_predicate_op74_read_state3)
    begin
                ap_block_state3_pp0_stage0_iter1_grp1 <= ((src_TVALID = ap_const_logic_0) and (ap_predicate_op74_read_state3 = ap_const_boolean_1));
    end process;


    ap_condition_701_assign_proc : process(ap_block_pp0_stage0_grp1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln118_reg_1032, btm_read_read_fu_202_p2)
    begin
                ap_condition_701 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (btm_read_read_fu_202_p2 = ap_const_lv2_1) and (icmp_ln118_reg_1032 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1));
    end process;


    ap_condition_705_assign_proc : process(ap_block_pp0_stage0_grp1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln118_reg_1032, btm_read_read_fu_202_p2)
    begin
                ap_condition_705 <= (not((btm_read_read_fu_202_p2 = ap_const_lv2_0)) and not((btm_read_read_fu_202_p2 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln118_reg_1032 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1));
    end process;


    ap_condition_708_assign_proc : process(ap_block_pp0_stage0_grp1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln118_reg_1032, btm_read_read_fu_202_p2)
    begin
                ap_condition_708 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (btm_read_read_fu_202_p2 = ap_const_lv2_0) and (icmp_ln118_reg_1032 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1));
    end process;


    ap_condition_pp0_exit_iter3_state5_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_condition_pp0_exit_iter3_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter3_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln118_fu_470_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln118_fu_470_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op74_read_state3_assign_proc : process(icmp_ln118_reg_1032, cmp_i_i126_reg_1021)
    begin
                ap_predicate_op74_read_state3 <= ((cmp_i_i126_reg_1021 = ap_const_lv1_1) and (icmp_ln118_reg_1032 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    btm_read_read_fu_202_p2 <= btm;
    cmp_i_i126_fu_414_p2 <= "1" when (unsigned(zext_ln98_cast_fu_410_p1) < unsigned(rows_cast_fu_406_p1)) else "0";
    col_3_fu_475_p2 <= std_logic_vector(unsigned(col_2_fu_158) + unsigned(ap_const_lv13_1));
    data_p_last_fu_486_p2 <= (icmp_ln141_fu_481_p2 and cmp_i_i80);
    data_p_strb_4_out <= data_p_strb_fu_162;

    data_p_strb_4_out_ap_vld_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data_p_strb_4_out_ap_vld <= ap_const_logic_1;
        else 
            data_p_strb_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    dst_TDATA <= 
        ap_const_lv8_FF when (tmp_7_fu_919_p3(0) = '1') else 
        sobel_1_fu_909_p2;

    dst_TDATA_blk_n_assign_proc : process(dst_TREADY, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            dst_TDATA_blk_n <= dst_TREADY;
        else 
            dst_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_TKEEP <= ap_const_lv1_1;
    dst_TLAST <= data_p_last_reg_1036_pp0_iter4_reg;
    dst_TSTRB <= data_p_strb_4_reg_1041_pp0_iter4_reg;

    dst_TVALID_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            dst_TVALID <= ap_const_logic_1;
        else 
            dst_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    g_x_fu_828_p3 <= 
        select_ln28_fu_814_p3 when (or_ln28_fu_822_p2(0) = '1') else 
        trunc_ln28_fu_804_p1;
    g_y_fu_895_p3 <= 
        select_ln50_fu_881_p3 when (or_ln50_fu_889_p2(0) = '1') else 
        trunc_ln50_fu_871_p1;
    icmp_ln118_fu_470_p2 <= "1" when (signed(zext_ln118_fu_466_p1) < signed(cols)) else "0";
    icmp_ln141_fu_481_p2 <= "1" when (sub = zext_ln118_fu_466_p1) else "0";
    icmp_ln24_fu_798_p2 <= "1" when (signed(tmp_4_fu_788_p4) > signed(ap_const_lv3_0)) else "0";
    icmp_ln46_fu_865_p2 <= "1" when (signed(tmp_6_fu_855_p4) > signed(ap_const_lv3_0)) else "0";
    or_ln28_fu_822_p2 <= (tmp_3_fu_780_p3 or icmp_ln24_fu_798_p2);
    or_ln50_fu_889_p2 <= (tmp_5_fu_847_p3 or icmp_ln46_fu_865_p2);
    out_pix_4_fu_841_p2 <= std_logic_vector(unsigned(out_pix_7_fu_836_p2) + unsigned(zext_ln14_fu_759_p1));
    out_pix_5_fu_765_p2 <= std_logic_vector(unsigned(zext_ln13_fu_756_p1) - unsigned(zext_ln16_fu_762_p1));
    out_pix_6_fu_717_p2 <= std_logic_vector(unsigned(A00_fu_711_p2) - unsigned(zext_ln14_2_fu_639_p1));
    out_pix_7_fu_836_p2 <= std_logic_vector(unsigned(out_pix_6_reg_1096) - unsigned(zext_ln13_fu_756_p1));
    out_pix_fu_774_p2 <= std_logic_vector(unsigned(zext_ln18_fu_771_p1) + unsigned(out_pix_5_fu_765_p2));
    rows_cast_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rows),32));
    select_ln28_fu_814_p3 <= 
        ap_const_lv8_FF when (xor_ln28_fu_808_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln50_fu_881_p3 <= 
        ap_const_lv8_FF when (xor_ln50_fu_875_p2(0) = '1') else 
        ap_const_lv8_0;
        sext_ln35_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(S00_fu_701_p2),11));

    sobel_1_fu_909_p2 <= std_logic_vector(unsigned(g_x_reg_1101) + unsigned(g_y_reg_1107));

    src_TDATA_blk_n_assign_proc : process(src_TVALID, ap_block_pp0_stage0_grp1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln118_reg_1032, cmp_i_i126_reg_1021)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (cmp_i_i126_reg_1021 = ap_const_lv1_1) and (icmp_ln118_reg_1032 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1))) then 
            src_TDATA_blk_n <= src_TVALID;
        else 
            src_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op74_read_state3, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op74_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            src_TREADY <= ap_const_logic_1;
        else 
            src_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    temp_fu_913_p2 <= std_logic_vector(unsigned(zext_ln59_fu_903_p1) + unsigned(zext_ln59_1_fu_906_p1));
    tmp_1_fu_573_p7 <= "XXXXXXXX";
    tmp_2_fu_592_p7 <= "XXXXXXXX";
    tmp_3_fu_780_p3 <= out_pix_fu_774_p2(10 downto 10);
    tmp_4_fu_788_p4 <= out_pix_fu_774_p2(10 downto 8);
    tmp_5_fu_847_p3 <= out_pix_4_fu_841_p2(10 downto 10);
    tmp_6_fu_855_p4 <= out_pix_4_fu_841_p2(10 downto 8);
    tmp_7_fu_919_p3 <= temp_fu_913_p2(8 downto 8);
    tmp_fu_554_p7 <= "XXXXXXXX";
    trunc_ln28_fu_804_p1 <= out_pix_fu_774_p2(8 - 1 downto 0);
    trunc_ln50_fu_871_p1 <= out_pix_4_fu_841_p2(8 - 1 downto 0);
    xor_ln28_fu_808_p2 <= (tmp_3_fu_780_p3 xor ap_const_lv1_1);
    xor_ln50_fu_875_p2 <= (tmp_5_fu_847_p3 xor ap_const_lv1_1);
    zext_ln118_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_2_fu_158),32));
    zext_ln11_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(M00_fu_611_p3),10));
    zext_ln125_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_reg_1025),64));
    zext_ln128_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_reg_1025),64));
    zext_ln12_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(M01_fu_623_p3),10));
    zext_ln130_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_reg_1025_pp0_iter1_reg),64));
    zext_ln13_1_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_1_fu_655_p2),10));
    zext_ln13_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1076),11));
    zext_ln14_1_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_592_p9),10));
    zext_ln14_2_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(WindowBuffer_18_out_i),11));
    zext_ln14_3_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(WindowBuffer_18_out_i),9));
    zext_ln14_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_1081),11));
    zext_ln15_1_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(WindowBuffer_22_out_i),9));
    zext_ln15_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(WindowBuffer_22_out_i),11));
    zext_ln16_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_reg_1086),11));
    zext_ln18_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_reg_1091),11));
    zext_ln33_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(M00_1_fu_677_p3),10));
    zext_ln34_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(M01_1_fu_689_p3),10));
    zext_ln59_1_fu_906_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(g_y_reg_1107),9));
    zext_ln59_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(g_x_reg_1101),9));
    zext_ln98_cast_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln98),32));
end behav;
