// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sobel_sobel_Pipeline_VITIS_LOOP_118_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        WindowBuffer_13,
        WindowBuffer_14,
        WindowBuffer_12,
        WindowBuffer_17,
        WindowBuffer_15,
        WindowBuffer_16,
        data_p_strb_2,
        cols,
        LineBuffer_address0,
        LineBuffer_ce0,
        LineBuffer_we0,
        LineBuffer_d0,
        LineBuffer_address1,
        LineBuffer_ce1,
        LineBuffer_q1,
        LineBuffer_1_address0,
        LineBuffer_1_ce0,
        LineBuffer_1_we0,
        LineBuffer_1_d0,
        LineBuffer_1_address1,
        LineBuffer_1_ce1,
        LineBuffer_1_q1,
        LineBuffer_2_address0,
        LineBuffer_2_ce0,
        LineBuffer_2_we0,
        LineBuffer_2_d0,
        LineBuffer_2_address1,
        LineBuffer_2_ce1,
        LineBuffer_2_q1,
        top,
        mid,
        btm,
        sub,
        cmp_i_i80,
        dst_TDATA,
        dst_TVALID,
        dst_TREADY,
        dst_TKEEP,
        dst_TSTRB,
        dst_TLAST,
        src_TDATA,
        src_TVALID,
        src_TREADY,
        src_TKEEP,
        src_TSTRB,
        src_TLAST,
        zext_ln98,
        rows,
        WindowBuffer_21_out,
        WindowBuffer_21_out_ap_vld,
        WindowBuffer_23_out,
        WindowBuffer_23_out_ap_vld,
        WindowBuffer_19_out,
        WindowBuffer_19_out_ap_vld,
        WindowBuffer_22_out_i,
        WindowBuffer_22_out_o,
        WindowBuffer_22_out_o_ap_vld,
        WindowBuffer_18_out_i,
        WindowBuffer_18_out_o,
        WindowBuffer_18_out_o_ap_vld,
        WindowBuffer_20_out_i,
        WindowBuffer_20_out_o,
        WindowBuffer_20_out_o_ap_vld,
        data_p_strb_4_out,
        data_p_strb_4_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_state8 = 5'd4;
parameter    ap_ST_fsm_state9 = 5'd8;
parameter    ap_ST_fsm_state10 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] WindowBuffer_13;
input  [7:0] WindowBuffer_14;
input  [7:0] WindowBuffer_12;
input  [7:0] WindowBuffer_17;
input  [7:0] WindowBuffer_15;
input  [7:0] WindowBuffer_16;
input  [0:0] data_p_strb_2;
input  [31:0] cols;
output  [10:0] LineBuffer_address0;
output   LineBuffer_ce0;
output   LineBuffer_we0;
output  [7:0] LineBuffer_d0;
output  [10:0] LineBuffer_address1;
output   LineBuffer_ce1;
input  [7:0] LineBuffer_q1;
output  [10:0] LineBuffer_1_address0;
output   LineBuffer_1_ce0;
output   LineBuffer_1_we0;
output  [7:0] LineBuffer_1_d0;
output  [10:0] LineBuffer_1_address1;
output   LineBuffer_1_ce1;
input  [7:0] LineBuffer_1_q1;
output  [10:0] LineBuffer_2_address0;
output   LineBuffer_2_ce0;
output   LineBuffer_2_we0;
output  [7:0] LineBuffer_2_d0;
output  [10:0] LineBuffer_2_address1;
output   LineBuffer_2_ce1;
input  [7:0] LineBuffer_2_q1;
input  [1:0] top;
input  [1:0] mid;
input  [1:0] btm;
input  [31:0] sub;
input  [0:0] cmp_i_i80;
output  [7:0] dst_TDATA;
output   dst_TVALID;
input   dst_TREADY;
output  [0:0] dst_TKEEP;
output  [0:0] dst_TSTRB;
output  [0:0] dst_TLAST;
input  [7:0] src_TDATA;
input   src_TVALID;
output   src_TREADY;
input  [0:0] src_TKEEP;
input  [0:0] src_TSTRB;
input  [0:0] src_TLAST;
input  [12:0] zext_ln98;
input  [30:0] rows;
output  [7:0] WindowBuffer_21_out;
output   WindowBuffer_21_out_ap_vld;
output  [7:0] WindowBuffer_23_out;
output   WindowBuffer_23_out_ap_vld;
output  [7:0] WindowBuffer_19_out;
output   WindowBuffer_19_out_ap_vld;
input  [7:0] WindowBuffer_22_out_i;
output  [7:0] WindowBuffer_22_out_o;
output   WindowBuffer_22_out_o_ap_vld;
input  [7:0] WindowBuffer_18_out_i;
output  [7:0] WindowBuffer_18_out_o;
output   WindowBuffer_18_out_o_ap_vld;
input  [7:0] WindowBuffer_20_out_i;
output  [7:0] WindowBuffer_20_out_o;
output   WindowBuffer_20_out_o_ap_vld;
output  [0:0] data_p_strb_4_out;
output   data_p_strb_4_out_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dst_TVALID;
reg src_TREADY;
reg WindowBuffer_21_out_ap_vld;
reg WindowBuffer_23_out_ap_vld;
reg WindowBuffer_19_out_ap_vld;
reg[7:0] WindowBuffer_22_out_o;
reg WindowBuffer_22_out_o_ap_vld;
reg[7:0] WindowBuffer_18_out_o;
reg WindowBuffer_18_out_o_ap_vld;
reg[7:0] WindowBuffer_20_out_o;
reg WindowBuffer_20_out_o_ap_vld;
reg data_p_strb_4_out_ap_vld;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    dst_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter5;
wire    ap_block_pp0_stage0_grp1;
reg    src_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln118_reg_1032;
reg   [0:0] cmp_i_i126_reg_1021;
wire   [1:0] btm_read_read_fu_202_p2;
wire   [0:0] cmp_i_i126_fu_414_p2;
reg   [12:0] col_reg_1025;
reg    ap_predicate_op74_read_state3;
reg    ap_block_state3_pp0_stage0_iter1_grp1;
reg    ap_block_pp0_stage0_11001;
reg   [12:0] col_reg_1025_pp0_iter1_reg;
wire   [0:0] icmp_ln118_fu_470_p2;
reg   [0:0] icmp_ln118_reg_1032_pp0_iter1_reg;
reg   [0:0] icmp_ln118_reg_1032_pp0_iter2_reg;
wire   [0:0] data_p_last_fu_486_p2;
reg   [0:0] data_p_last_reg_1036;
reg   [0:0] data_p_last_reg_1036_pp0_iter1_reg;
reg   [0:0] data_p_last_reg_1036_pp0_iter2_reg;
reg   [0:0] data_p_last_reg_1036_pp0_iter3_reg;
reg   [0:0] data_p_last_reg_1036_pp0_iter4_reg;
reg   [0:0] data_p_strb_4_reg_1041;
reg    ap_block_pp0_stage0_11001_grp1;
reg   [0:0] data_p_strb_4_reg_1041_pp0_iter3_reg;
reg   [0:0] data_p_strb_4_reg_1041_pp0_iter4_reg;
reg   [7:0] WindowBuffer_19_load_reg_1061;
reg    ap_enable_reg_pp0_iter3;
reg   [7:0] WindowBuffer_23_load_reg_1066;
reg   [7:0] WindowBuffer_21_load_reg_1071;
wire   [7:0] tmp_fu_554_p9;
reg   [7:0] tmp_reg_1076;
wire   [7:0] tmp_2_fu_592_p9;
reg   [7:0] tmp_2_reg_1081;
wire   [9:0] add_ln13_fu_665_p2;
reg   [9:0] add_ln13_reg_1086;
wire   [9:0] add_ln18_fu_671_p2;
reg   [9:0] add_ln18_reg_1091;
wire   [10:0] out_pix_6_fu_717_p2;
reg   [10:0] out_pix_6_reg_1096;
wire   [7:0] g_x_fu_828_p3;
reg   [7:0] g_x_reg_1101;
wire   [7:0] g_y_fu_895_p3;
reg   [7:0] g_y_reg_1107;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter4;
reg    ap_condition_pp0_exit_iter3_state5;
wire   [63:0] zext_ln128_fu_496_p1;
wire   [63:0] zext_ln125_fu_513_p1;
wire   [63:0] zext_ln130_fu_527_p1;
wire    ap_CS_fsm_state8;
reg   [12:0] col_2_fu_158;
wire   [12:0] col_3_fu_475_p2;
wire    ap_block_pp0_stage0;
reg   [0:0] data_p_strb_fu_162;
wire    ap_CS_fsm_state10;
reg   [7:0] WindowBuffer_19_fu_166;
reg   [7:0] WindowBuffer_23_fu_170;
reg   [7:0] WindowBuffer_21_fu_174;
wire   [7:0] tmp_1_fu_573_p9;
reg    ap_block_pp0_stage0_01001_grp1;
reg    LineBuffer_1_we0_local;
reg   [7:0] LineBuffer_1_d0_local;
reg    LineBuffer_1_ce0_local;
reg   [10:0] LineBuffer_1_address0_local;
reg    LineBuffer_1_ce1_local;
reg    LineBuffer_we0_local;
reg   [7:0] LineBuffer_d0_local;
reg    LineBuffer_ce0_local;
reg   [10:0] LineBuffer_address0_local;
reg    LineBuffer_ce1_local;
reg    LineBuffer_2_we0_local;
reg   [7:0] LineBuffer_2_d0_local;
reg    LineBuffer_2_ce0_local;
reg   [10:0] LineBuffer_2_address0_local;
reg    LineBuffer_2_ce1_local;
wire   [31:0] zext_ln98_cast_fu_410_p1;
wire   [31:0] rows_cast_fu_406_p1;
wire   [31:0] zext_ln118_fu_466_p1;
wire   [0:0] icmp_ln141_fu_481_p2;
wire   [7:0] tmp_fu_554_p7;
wire   [7:0] tmp_1_fu_573_p7;
wire   [7:0] tmp_2_fu_592_p7;
wire   [8:0] M00_fu_611_p3;
wire   [8:0] M01_fu_623_p3;
wire   [8:0] zext_ln14_3_fu_643_p1;
wire   [8:0] zext_ln15_1_fu_651_p1;
wire   [8:0] add_ln13_1_fu_655_p2;
wire   [9:0] zext_ln13_1_fu_661_p1;
wire   [9:0] zext_ln11_fu_619_p1;
wire   [9:0] zext_ln12_fu_631_p1;
wire   [9:0] zext_ln14_1_fu_635_p1;
wire   [8:0] M00_1_fu_677_p3;
wire   [8:0] M01_1_fu_689_p3;
wire   [9:0] zext_ln34_fu_697_p1;
wire   [9:0] zext_ln33_fu_685_p1;
wire   [9:0] S00_fu_701_p2;
wire  signed [10:0] sext_ln35_fu_707_p1;
wire   [10:0] zext_ln15_fu_647_p1;
wire   [10:0] A00_fu_711_p2;
wire   [10:0] zext_ln14_2_fu_639_p1;
wire   [10:0] zext_ln13_fu_756_p1;
wire   [10:0] zext_ln16_fu_762_p1;
wire   [10:0] zext_ln18_fu_771_p1;
wire   [10:0] out_pix_5_fu_765_p2;
wire   [10:0] out_pix_fu_774_p2;
wire   [2:0] tmp_4_fu_788_p4;
wire   [0:0] tmp_3_fu_780_p3;
wire   [0:0] xor_ln28_fu_808_p2;
wire   [0:0] icmp_ln24_fu_798_p2;
wire   [0:0] or_ln28_fu_822_p2;
wire   [7:0] select_ln28_fu_814_p3;
wire   [7:0] trunc_ln28_fu_804_p1;
wire   [10:0] out_pix_7_fu_836_p2;
wire   [10:0] zext_ln14_fu_759_p1;
wire   [10:0] out_pix_4_fu_841_p2;
wire   [2:0] tmp_6_fu_855_p4;
wire   [0:0] tmp_5_fu_847_p3;
wire   [0:0] xor_ln50_fu_875_p2;
wire   [0:0] icmp_ln46_fu_865_p2;
wire   [0:0] or_ln50_fu_889_p2;
wire   [7:0] select_ln50_fu_881_p3;
wire   [7:0] trunc_ln50_fu_871_p1;
wire   [8:0] zext_ln59_fu_903_p1;
wire   [8:0] zext_ln59_1_fu_906_p1;
wire   [8:0] temp_fu_913_p2;
wire   [0:0] tmp_7_fu_919_p3;
wire   [7:0] sobel_1_fu_909_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_701;
reg    ap_condition_705;
reg    ap_condition_708;
wire   [1:0] tmp_fu_554_p1;
wire   [1:0] tmp_fu_554_p3;
wire  signed [1:0] tmp_fu_554_p5;
wire   [1:0] tmp_1_fu_573_p1;
wire   [1:0] tmp_1_fu_573_p3;
wire  signed [1:0] tmp_1_fu_573_p5;
wire   [1:0] tmp_2_fu_592_p1;
wire   [1:0] tmp_2_fu_592_p3;
wire  signed [1:0] tmp_2_fu_592_p5;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 col_2_fu_158 = 13'd0;
#0 data_p_strb_fu_162 = 1'd0;
#0 WindowBuffer_19_fu_166 = 8'd0;
#0 WindowBuffer_23_fu_170 = 8'd0;
#0 WindowBuffer_21_fu_174 = 8'd0;
end

(* dissolve_hierarchy = "yes" *) sobel_sparsemux_7_2_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sparsemux_7_2_8_1_1_U9(
    .din0(LineBuffer_q1),
    .din1(LineBuffer_1_q1),
    .din2(LineBuffer_2_q1),
    .def(tmp_fu_554_p7),
    .sel(top),
    .dout(tmp_fu_554_p9)
);

(* dissolve_hierarchy = "yes" *) sobel_sparsemux_7_2_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sparsemux_7_2_8_1_1_U10(
    .din0(LineBuffer_q1),
    .din1(LineBuffer_1_q1),
    .din2(LineBuffer_2_q1),
    .def(tmp_1_fu_573_p7),
    .sel(mid),
    .dout(tmp_1_fu_573_p9)
);

(* dissolve_hierarchy = "yes" *) sobel_sparsemux_7_2_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sparsemux_7_2_8_1_1_U11(
    .din0(LineBuffer_q1),
    .din1(LineBuffer_1_q1),
    .din2(LineBuffer_2_q1),
    .def(tmp_2_fu_592_p7),
    .sel(btm),
    .dout(tmp_2_fu_592_p9)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter3_state5)) begin
                ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter2;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        WindowBuffer_19_fu_166 <= WindowBuffer_12;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln118_reg_1032_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        WindowBuffer_19_fu_166 <= tmp_fu_554_p9;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        WindowBuffer_21_fu_174 <= WindowBuffer_13;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln118_reg_1032_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        WindowBuffer_21_fu_174 <= tmp_1_fu_573_p9;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        WindowBuffer_23_fu_170 <= WindowBuffer_14;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln118_reg_1032_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        WindowBuffer_23_fu_170 <= tmp_2_fu_592_p9;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        col_2_fu_158 <= 13'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln118_fu_470_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        col_2_fu_158 <= col_3_fu_475_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        data_p_strb_fu_162 <= data_p_strb_2;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (cmp_i_i126_reg_1021 == 1'd1) & (icmp_ln118_reg_1032 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        data_p_strb_fu_162 <= src_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        WindowBuffer_19_load_reg_1061 <= WindowBuffer_19_fu_166;
        WindowBuffer_21_load_reg_1071 <= WindowBuffer_21_fu_174;
        WindowBuffer_23_load_reg_1066 <= WindowBuffer_23_fu_170;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        add_ln13_reg_1086 <= add_ln13_fu_665_p2;
        add_ln18_reg_1091 <= add_ln18_fu_671_p2;
        data_p_strb_4_reg_1041 <= data_p_strb_fu_162;
        data_p_strb_4_reg_1041_pp0_iter3_reg <= data_p_strb_4_reg_1041;
        data_p_strb_4_reg_1041_pp0_iter4_reg <= data_p_strb_4_reg_1041_pp0_iter3_reg;
        g_x_reg_1101 <= g_x_fu_828_p3;
        g_y_reg_1107 <= g_y_fu_895_p3;
        out_pix_6_reg_1096 <= out_pix_6_fu_717_p2;
        tmp_2_reg_1081 <= tmp_2_fu_592_p9;
        tmp_reg_1076 <= tmp_fu_554_p9;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        cmp_i_i126_reg_1021 <= cmp_i_i126_fu_414_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        col_reg_1025 <= col_2_fu_158;
        col_reg_1025_pp0_iter1_reg <= col_reg_1025;
        data_p_last_reg_1036 <= data_p_last_fu_486_p2;
        data_p_last_reg_1036_pp0_iter1_reg <= data_p_last_reg_1036;
        icmp_ln118_reg_1032 <= icmp_ln118_fu_470_p2;
        icmp_ln118_reg_1032_pp0_iter1_reg <= icmp_ln118_reg_1032;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        data_p_last_reg_1036_pp0_iter2_reg <= data_p_last_reg_1036_pp0_iter1_reg;
        data_p_last_reg_1036_pp0_iter3_reg <= data_p_last_reg_1036_pp0_iter2_reg;
        data_p_last_reg_1036_pp0_iter4_reg <= data_p_last_reg_1036_pp0_iter3_reg;
        icmp_ln118_reg_1032_pp0_iter2_reg <= icmp_ln118_reg_1032_pp0_iter1_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_701)) begin
        if ((cmp_i_i126_reg_1021 == 1'd1)) begin
            LineBuffer_1_address0_local = zext_ln125_fu_513_p1;
        end else if ((cmp_i_i126_reg_1021 == 1'd0)) begin
            LineBuffer_1_address0_local = zext_ln128_fu_496_p1;
        end else begin
            LineBuffer_1_address0_local = 'bx;
        end
    end else begin
        LineBuffer_1_address0_local = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (btm_read_read_fu_202_p2 == 2'd1) & (cmp_i_i126_reg_1021 == 1'd0) & (icmp_ln118_reg_1032 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (btm_read_read_fu_202_p2 == 2'd1) & (cmp_i_i126_reg_1021 == 1'd1) & (icmp_ln118_reg_1032 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1)))) begin
        LineBuffer_1_ce0_local = 1'b1;
    end else begin
        LineBuffer_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        LineBuffer_1_ce1_local = 1'b1;
    end else begin
        LineBuffer_1_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_701)) begin
        if ((cmp_i_i126_reg_1021 == 1'd1)) begin
            LineBuffer_1_d0_local = src_TDATA;
        end else if ((cmp_i_i126_reg_1021 == 1'd0)) begin
            LineBuffer_1_d0_local = 8'd0;
        end else begin
            LineBuffer_1_d0_local = 'bx;
        end
    end else begin
        LineBuffer_1_d0_local = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (btm_read_read_fu_202_p2 == 2'd1) & (cmp_i_i126_reg_1021 == 1'd0) & (icmp_ln118_reg_1032 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (btm_read_read_fu_202_p2 == 2'd1) & (cmp_i_i126_reg_1021 == 1'd1) & (icmp_ln118_reg_1032 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1)))) begin
        LineBuffer_1_we0_local = 1'b1;
    end else begin
        LineBuffer_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_705)) begin
        if ((cmp_i_i126_reg_1021 == 1'd1)) begin
            LineBuffer_2_address0_local = zext_ln125_fu_513_p1;
        end else if ((cmp_i_i126_reg_1021 == 1'd0)) begin
            LineBuffer_2_address0_local = zext_ln128_fu_496_p1;
        end else begin
            LineBuffer_2_address0_local = 'bx;
        end
    end else begin
        LineBuffer_2_address0_local = 'bx;
    end
end

always @ (*) begin
    if (((~(btm_read_read_fu_202_p2 == 2'd0) & ~(btm_read_read_fu_202_p2 == 2'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (cmp_i_i126_reg_1021 == 1'd0) & (icmp_ln118_reg_1032 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1)) | (~(btm_read_read_fu_202_p2 == 2'd0) & ~(btm_read_read_fu_202_p2 == 2'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (cmp_i_i126_reg_1021 == 1'd1) & (icmp_ln118_reg_1032 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1)))) begin
        LineBuffer_2_ce0_local = 1'b1;
    end else begin
        LineBuffer_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        LineBuffer_2_ce1_local = 1'b1;
    end else begin
        LineBuffer_2_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_705)) begin
        if ((cmp_i_i126_reg_1021 == 1'd1)) begin
            LineBuffer_2_d0_local = src_TDATA;
        end else if ((cmp_i_i126_reg_1021 == 1'd0)) begin
            LineBuffer_2_d0_local = 8'd0;
        end else begin
            LineBuffer_2_d0_local = 'bx;
        end
    end else begin
        LineBuffer_2_d0_local = 'bx;
    end
end

always @ (*) begin
    if (((~(btm_read_read_fu_202_p2 == 2'd0) & ~(btm_read_read_fu_202_p2 == 2'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (cmp_i_i126_reg_1021 == 1'd0) & (icmp_ln118_reg_1032 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1)) | (~(btm_read_read_fu_202_p2 == 2'd0) & ~(btm_read_read_fu_202_p2 == 2'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (cmp_i_i126_reg_1021 == 1'd1) & (icmp_ln118_reg_1032 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1)))) begin
        LineBuffer_2_we0_local = 1'b1;
    end else begin
        LineBuffer_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_708)) begin
        if ((cmp_i_i126_reg_1021 == 1'd1)) begin
            LineBuffer_address0_local = zext_ln125_fu_513_p1;
        end else if ((cmp_i_i126_reg_1021 == 1'd0)) begin
            LineBuffer_address0_local = zext_ln128_fu_496_p1;
        end else begin
            LineBuffer_address0_local = 'bx;
        end
    end else begin
        LineBuffer_address0_local = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (btm_read_read_fu_202_p2 == 2'd0) & (cmp_i_i126_reg_1021 == 1'd0) & (icmp_ln118_reg_1032 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (btm_read_read_fu_202_p2 == 2'd0) & (cmp_i_i126_reg_1021 == 1'd1) & (icmp_ln118_reg_1032 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1)))) begin
        LineBuffer_ce0_local = 1'b1;
    end else begin
        LineBuffer_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        LineBuffer_ce1_local = 1'b1;
    end else begin
        LineBuffer_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_708)) begin
        if ((cmp_i_i126_reg_1021 == 1'd1)) begin
            LineBuffer_d0_local = src_TDATA;
        end else if ((cmp_i_i126_reg_1021 == 1'd0)) begin
            LineBuffer_d0_local = 8'd0;
        end else begin
            LineBuffer_d0_local = 'bx;
        end
    end else begin
        LineBuffer_d0_local = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (btm_read_read_fu_202_p2 == 2'd0) & (cmp_i_i126_reg_1021 == 1'd0) & (icmp_ln118_reg_1032 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (btm_read_read_fu_202_p2 == 2'd0) & (cmp_i_i126_reg_1021 == 1'd1) & (icmp_ln118_reg_1032 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1)))) begin
        LineBuffer_we0_local = 1'b1;
    end else begin
        LineBuffer_we0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        WindowBuffer_18_out_o = WindowBuffer_15;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln118_reg_1032_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_grp1))) begin
        WindowBuffer_18_out_o = WindowBuffer_19_fu_166;
    end else begin
        WindowBuffer_18_out_o = WindowBuffer_18_out_i;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln118_reg_1032_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001_grp1)))) begin
        WindowBuffer_18_out_o_ap_vld = 1'b1;
    end else begin
        WindowBuffer_18_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        WindowBuffer_19_out_ap_vld = 1'b1;
    end else begin
        WindowBuffer_19_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        WindowBuffer_20_out_o = WindowBuffer_16;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln118_reg_1032_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_grp1))) begin
        WindowBuffer_20_out_o = WindowBuffer_21_fu_174;
    end else begin
        WindowBuffer_20_out_o = WindowBuffer_20_out_i;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln118_reg_1032_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001_grp1)))) begin
        WindowBuffer_20_out_o_ap_vld = 1'b1;
    end else begin
        WindowBuffer_20_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        WindowBuffer_21_out_ap_vld = 1'b1;
    end else begin
        WindowBuffer_21_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        WindowBuffer_22_out_o = WindowBuffer_17;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln118_reg_1032_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_grp1))) begin
        WindowBuffer_22_out_o = WindowBuffer_23_fu_170;
    end else begin
        WindowBuffer_22_out_o = WindowBuffer_22_out_i;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln118_reg_1032_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001_grp1)))) begin
        WindowBuffer_22_out_o_ap_vld = 1'b1;
    end else begin
        WindowBuffer_22_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        WindowBuffer_23_out_ap_vld = 1'b1;
    end else begin
        WindowBuffer_23_out_ap_vld = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_condition_pp0_exit_iter3_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter3_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln118_fu_470_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        data_p_strb_4_out_ap_vld = 1'b1;
    end else begin
        data_p_strb_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        dst_TDATA_blk_n = dst_TREADY;
    end else begin
        dst_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        dst_TVALID = 1'b1;
    end else begin
        dst_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (cmp_i_i126_reg_1021 == 1'd1) & (icmp_ln118_reg_1032 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_grp1))) begin
        src_TDATA_blk_n = src_TVALID;
    end else begin
        src_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op74_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        src_TREADY = 1'b1;
    end else begin
        src_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A00_fu_711_p2 = ($signed(sext_ln35_fu_707_p1) + $signed(zext_ln15_fu_647_p1));

assign LineBuffer_1_address0 = LineBuffer_1_address0_local;

assign LineBuffer_1_address1 = zext_ln130_fu_527_p1;

assign LineBuffer_1_ce0 = LineBuffer_1_ce0_local;

assign LineBuffer_1_ce1 = LineBuffer_1_ce1_local;

assign LineBuffer_1_d0 = LineBuffer_1_d0_local;

assign LineBuffer_1_we0 = LineBuffer_1_we0_local;

assign LineBuffer_2_address0 = LineBuffer_2_address0_local;

assign LineBuffer_2_address1 = zext_ln130_fu_527_p1;

assign LineBuffer_2_ce0 = LineBuffer_2_ce0_local;

assign LineBuffer_2_ce1 = LineBuffer_2_ce1_local;

assign LineBuffer_2_d0 = LineBuffer_2_d0_local;

assign LineBuffer_2_we0 = LineBuffer_2_we0_local;

assign LineBuffer_address0 = LineBuffer_address0_local;

assign LineBuffer_address1 = zext_ln130_fu_527_p1;

assign LineBuffer_ce0 = LineBuffer_ce0_local;

assign LineBuffer_ce1 = LineBuffer_ce1_local;

assign LineBuffer_d0 = LineBuffer_d0_local;

assign LineBuffer_we0 = LineBuffer_we0_local;

assign M00_1_fu_677_p3 = {{WindowBuffer_19_fu_166}, {1'd0}};

assign M00_fu_611_p3 = {{WindowBuffer_20_out_i}, {1'd0}};

assign M01_1_fu_689_p3 = {{WindowBuffer_23_fu_170}, {1'd0}};

assign M01_fu_623_p3 = {{tmp_1_fu_573_p9}, {1'd0}};

assign S00_fu_701_p2 = (zext_ln34_fu_697_p1 - zext_ln33_fu_685_p1);

assign WindowBuffer_19_out = WindowBuffer_19_load_reg_1061;

assign WindowBuffer_21_out = WindowBuffer_21_load_reg_1071;

assign WindowBuffer_23_out = WindowBuffer_23_load_reg_1066;

assign add_ln13_1_fu_655_p2 = (zext_ln14_3_fu_643_p1 + zext_ln15_1_fu_651_p1);

assign add_ln13_fu_665_p2 = (zext_ln13_1_fu_661_p1 + zext_ln11_fu_619_p1);

assign add_ln18_fu_671_p2 = (zext_ln12_fu_631_p1 + zext_ln14_1_fu_635_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = (((dst_TREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((1'b1 == ap_block_state3_pp0_stage0_iter1_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((dst_TREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((1'b1 == ap_block_state3_pp0_stage0_iter1_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = (((dst_TREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((1'b1 == ap_block_state3_pp0_stage0_iter1_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((dst_TREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((1'b1 == ap_block_state3_pp0_stage0_iter1_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1_grp1 = ((src_TVALID == 1'b0) & (ap_predicate_op74_read_state3 == 1'b1));
end

always @ (*) begin
    ap_condition_701 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (btm_read_read_fu_202_p2 == 2'd1) & (icmp_ln118_reg_1032 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_grp1));
end

always @ (*) begin
    ap_condition_705 = (~(btm_read_read_fu_202_p2 == 2'd0) & ~(btm_read_read_fu_202_p2 == 2'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln118_reg_1032 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_grp1));
end

always @ (*) begin
    ap_condition_708 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (btm_read_read_fu_202_p2 == 2'd0) & (icmp_ln118_reg_1032 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_grp1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op74_read_state3 = ((cmp_i_i126_reg_1021 == 1'd1) & (icmp_ln118_reg_1032 == 1'd1));
end

assign btm_read_read_fu_202_p2 = btm;

assign cmp_i_i126_fu_414_p2 = ((zext_ln98_cast_fu_410_p1 < rows_cast_fu_406_p1) ? 1'b1 : 1'b0);

assign col_3_fu_475_p2 = (col_2_fu_158 + 13'd1);

assign data_p_last_fu_486_p2 = (icmp_ln141_fu_481_p2 & cmp_i_i80);

assign data_p_strb_4_out = data_p_strb_fu_162;

assign dst_TDATA = ((tmp_7_fu_919_p3[0:0] == 1'b1) ? 8'd255 : sobel_1_fu_909_p2);

assign dst_TKEEP = 1'd1;

assign dst_TLAST = data_p_last_reg_1036_pp0_iter4_reg;

assign dst_TSTRB = data_p_strb_4_reg_1041_pp0_iter4_reg;

assign g_x_fu_828_p3 = ((or_ln28_fu_822_p2[0:0] == 1'b1) ? select_ln28_fu_814_p3 : trunc_ln28_fu_804_p1);

assign g_y_fu_895_p3 = ((or_ln50_fu_889_p2[0:0] == 1'b1) ? select_ln50_fu_881_p3 : trunc_ln50_fu_871_p1);

assign icmp_ln118_fu_470_p2 = (($signed(zext_ln118_fu_466_p1) < $signed(cols)) ? 1'b1 : 1'b0);

assign icmp_ln141_fu_481_p2 = ((sub == zext_ln118_fu_466_p1) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_798_p2 = (($signed(tmp_4_fu_788_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_865_p2 = (($signed(tmp_6_fu_855_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign or_ln28_fu_822_p2 = (tmp_3_fu_780_p3 | icmp_ln24_fu_798_p2);

assign or_ln50_fu_889_p2 = (tmp_5_fu_847_p3 | icmp_ln46_fu_865_p2);

assign out_pix_4_fu_841_p2 = (out_pix_7_fu_836_p2 + zext_ln14_fu_759_p1);

assign out_pix_5_fu_765_p2 = (zext_ln13_fu_756_p1 - zext_ln16_fu_762_p1);

assign out_pix_6_fu_717_p2 = (A00_fu_711_p2 - zext_ln14_2_fu_639_p1);

assign out_pix_7_fu_836_p2 = (out_pix_6_reg_1096 - zext_ln13_fu_756_p1);

assign out_pix_fu_774_p2 = (zext_ln18_fu_771_p1 + out_pix_5_fu_765_p2);

assign rows_cast_fu_406_p1 = rows;

assign select_ln28_fu_814_p3 = ((xor_ln28_fu_808_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln50_fu_881_p3 = ((xor_ln50_fu_875_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign sext_ln35_fu_707_p1 = $signed(S00_fu_701_p2);

assign sobel_1_fu_909_p2 = (g_x_reg_1101 + g_y_reg_1107);

assign temp_fu_913_p2 = (zext_ln59_fu_903_p1 + zext_ln59_1_fu_906_p1);

assign tmp_1_fu_573_p7 = 'bx;

assign tmp_2_fu_592_p7 = 'bx;

assign tmp_3_fu_780_p3 = out_pix_fu_774_p2[32'd10];

assign tmp_4_fu_788_p4 = {{out_pix_fu_774_p2[10:8]}};

assign tmp_5_fu_847_p3 = out_pix_4_fu_841_p2[32'd10];

assign tmp_6_fu_855_p4 = {{out_pix_4_fu_841_p2[10:8]}};

assign tmp_7_fu_919_p3 = temp_fu_913_p2[32'd8];

assign tmp_fu_554_p7 = 'bx;

assign trunc_ln28_fu_804_p1 = out_pix_fu_774_p2[7:0];

assign trunc_ln50_fu_871_p1 = out_pix_4_fu_841_p2[7:0];

assign xor_ln28_fu_808_p2 = (tmp_3_fu_780_p3 ^ 1'd1);

assign xor_ln50_fu_875_p2 = (tmp_5_fu_847_p3 ^ 1'd1);

assign zext_ln118_fu_466_p1 = col_2_fu_158;

assign zext_ln11_fu_619_p1 = M00_fu_611_p3;

assign zext_ln125_fu_513_p1 = col_reg_1025;

assign zext_ln128_fu_496_p1 = col_reg_1025;

assign zext_ln12_fu_631_p1 = M01_fu_623_p3;

assign zext_ln130_fu_527_p1 = col_reg_1025_pp0_iter1_reg;

assign zext_ln13_1_fu_661_p1 = add_ln13_1_fu_655_p2;

assign zext_ln13_fu_756_p1 = tmp_reg_1076;

assign zext_ln14_1_fu_635_p1 = tmp_2_fu_592_p9;

assign zext_ln14_2_fu_639_p1 = WindowBuffer_18_out_i;

assign zext_ln14_3_fu_643_p1 = WindowBuffer_18_out_i;

assign zext_ln14_fu_759_p1 = tmp_2_reg_1081;

assign zext_ln15_1_fu_651_p1 = WindowBuffer_22_out_i;

assign zext_ln15_fu_647_p1 = WindowBuffer_22_out_i;

assign zext_ln16_fu_762_p1 = add_ln13_reg_1086;

assign zext_ln18_fu_771_p1 = add_ln18_reg_1091;

assign zext_ln33_fu_685_p1 = M00_1_fu_677_p3;

assign zext_ln34_fu_697_p1 = M01_1_fu_689_p3;

assign zext_ln59_1_fu_906_p1 = g_y_reg_1107;

assign zext_ln59_fu_903_p1 = g_x_reg_1101;

assign zext_ln98_cast_fu_410_p1 = zext_ln98;

endmodule //sobel_sobel_Pipeline_VITIS_LOOP_118_3
