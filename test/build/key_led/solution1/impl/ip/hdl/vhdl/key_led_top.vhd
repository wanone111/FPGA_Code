-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity key_led_top is
port (
    key0 : IN STD_LOGIC_VECTOR (0 downto 0);
    key1 : IN STD_LOGIC_VECTOR (0 downto 0);
    led0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    led1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_rst : IN STD_LOGIC );
end;


architecture behav of key_led_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "key_led_top_key_led_top,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.707300,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=14,HLS_VERSION=2024_2}";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal led_fu_80_p8 : STD_LOGIC_VECTOR (1 downto 0);
    signal led_fu_80_p9 : STD_LOGIC_VECTOR (1 downto 0);
    signal led_fu_80_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal led_fu_80_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal led_fu_80_p5 : STD_LOGIC_VECTOR (1 downto 0);

    component key_led_top_sparsemux_7_2_2_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        din2 : IN STD_LOGIC_VECTOR (1 downto 0);
        def : IN STD_LOGIC_VECTOR (1 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;



begin
    sparsemux_7_2_2_1_1_U1 : component key_led_top_sparsemux_7_2_2_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "01",
        din0_WIDTH => 2,
        CASE1 => "10",
        din1_WIDTH => 2,
        CASE2 => "11",
        din2_WIDTH => 2,
        def_WIDTH => 2,
        sel_WIDTH => 2,
        dout_WIDTH => 2)
    port map (
        din0 => ap_const_lv2_1,
        din1 => ap_const_lv2_2,
        din2 => ap_const_lv2_3,
        def => ap_const_lv2_0,
        sel => led_fu_80_p8,
        dout => led_fu_80_p9);




    led0 <= led_fu_80_p9(1 - 1 downto 0);
    led1 <= led_fu_80_p9(1 downto 1);
    led_fu_80_p8 <= (key1 & key0);
end behav;
