{
  "schema": "vitis_libraries_api_list_schema-1.0",
  "api_list": [
                    {
                                      "api_name": "xf::cv::absdiff",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::absdiff",
                                                        "target_domain": "PL",
                                                        "display_name": "absdiff",
                                                        "brief": "The ``absdiff`` function finds the pixel wise absolute difference between two input images and returns an output image. The input and the output images must be the XF_8UC1 type. |  | |image0| Where, -  I\\ :sub:`out`\\ (x, y) is the intensity of output image at (x,y)    position. -  I\\ :sub:`in1`\\ (x, y) is the intensity of first input image at (x,y)    position. -  I\\ :sub:`in2`\\ (x, y) is the intensity of second input image at (x,y)    position.",
                                                        
                                                        "header_file_name": [
                                                                          "core/xf_arithm.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input and Output pixel type. Only 8-bit, unsigned, 1 and 3 channels are supported (XF_8UC1 and XF_8UC3) ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. Must be multiple of 8, for 8-pixel operation. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8 pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                        }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "src1",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "src2",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::accumulate",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::accumulate",
                                                        "target_domain": "PL",
                                                        "display_name": "accumulate",
                                                        "brief": "The ``accumulate`` function adds an image (src1) to the accumulator image (src2), and generates the accumulated result image (dst). |image1|",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_accumulate_image.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. Only 8-bit, unsigned, 1 and 3 channels are supported (XF_8UC1 and XF_8UC3) ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]

                                                                          },
                                                                          {
                                                                                            "name": "DST_T",
                                                                                            "type": "int",
                                                                                            "description": " Output pixel type. Only 16-bit, unsigned, 1 and 3 channels are supported (XF_16UC1 and XF_16UC3) ",
                                                                                            "enum": ["XF_16UC1", "XF_16UC3"]

                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. Recommend using a multiple of 8, for an 8-pixel operation. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8 pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                                            
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "src1",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "src2",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_T, ROWS, COLS, NPC>& "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::accumulateSquare",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::accumulateSquare",
                                                        "target_domain": "PL",
                                                        "display_name": "accumulateSquare",
                                                        "brief": "The ``accumulateSquare`` function adds the square of an image (src1) to the accumulator image (src2) and generates the accumulated result (dst). |  | |image4| The accumulated result is a separate argument in the function, instead of having src2 as the accumulated result. In this implementation, having a bi-directional accumulator is not possible as the function makes use of streams.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_accumulate_squared.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. Only 8-bit, unsigned, 1 and 3 channels are supported (XF_8UC1 and XF_8UC3) ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "DST_T",
                                                                                            "type": "int",
                                                                                            "description": " Output pixel type. Only 16-bit, unsigned, 1 and 3 channels are supported (XF_16UC1 and XF_16UC3) ",
                                                                                            "enum": ["XF_16UC1", "XF_16UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image (must be multiple of 8, for 8-pixel operation) "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8 pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]

                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "src1",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "src2",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_T, ROWS, COLS, NPC>& "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::accumulateWeighted",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::accumulateWeighted",
                                                        "target_domain": "PL",
                                                        "display_name": "accumulateWeighted",
                                                        "brief": "The ``accumulateWeighted`` function computes the weighted sum of the input image (src1) and the accumulator image (src2) and generates the result in dst. |  | |image7| The accumulated result is a separate argument in the function, instead of having src2 as the accumulated result. In this implementation, having a bi-directional accumulator is not possible, as the function uses streams.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_accumulate_weighted.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. Only 8-bit, unsigned, 1 and 3 channels are supported (XF_8UC1 and XF_8UC3) ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "DST_T",
                                                                                            "type": "int",
                                                                                            "description": " Output pixel type. Only 16-bit, unsigned, 1 and 3 channels are supported (XF_16UC1 and XF_16UC3) ",
                                                                                            "enum": ["XF_16UC1", "XF_16UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. Recommend multiples of 8, for an 8-pixel operation. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8 pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]

                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "src1",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "src2",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "alpha",
                                                                                            "direction": "in",
                                                                                            "type": "float"
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::add",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::add",
                                                        "target_domain": "PL",
                                                        "display_name": "add",
                                                        "brief": "The ``add`` function performs the pixel-wise addition between two input images and returns the output image. *I\\ out\\ (x, y) = I\\ in1\\ (x, y) + I\\ in2\\ (x, y)* Where: -  *I\\ out\\ (x, y)* is the intensity of the output image at (x, y)    position -  *I\\ in1\\ (x, y)* is the intensity of the first input image at (x, y)    position -  *I\\ in2\\ (x, y)* is the intensity of the second input image at (x, y)    position. XF_CONVERT_POLICY_TRUNCATE: Results are the least significant bits of the output operand, as if stored in two\u2019s complement binary format in the size of its bit-depth. XF_CONVERT_POLICY_SATURATE: Results are saturated to the bit depth of the output operand.",
                                                        
                                                        "header_file_name": [
                                                                          "core/xf_arithm.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "POLICY_TYPE",
                                                                                            "type": "int",
                                                                                            "description": "Conversion Policy for fixed point arithmetic",
                                                                                            "enum": ["XF_CONVERT_POLICY_SATURATE"]
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Pixel type. Options are XF_8UC1, XF_8UC3, XF_16SC3, and XF_16SC1. ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3","XF_16SC3","XF_16SC1"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image (must be a multiple of 8, for 8-pixel operation) "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8 pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "src1",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "src2",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::addS",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::addS",
                                                        "target_domain": "PL",
                                                        "display_name": "addS",
                                                        "brief": "The AddS function performs the addition operation between pixels of input image src and given scalar value scl and stores the result in dst. dst(x,y)= src(x,y) + scl Where (x,y) is the spatial coordinate of the pixel.",
                                                        
                                                        "header_file_name": [
                                                                          "core/xf_arithm.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "POLICY_TYPE",
                                                                                            "type": "int",
                                                                                            "description": "Conversion Policy for fixed point arithmetic",
                                                                                            "enum": ["XF_CONVERT_POLICY_SATURATE"]
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. 8-bit, unsigned, 1 channel is supported (XF_8UC1). ",
                                                                                            "enum": ["XF_8UC1"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. In case of N-pixel parallelism, width should be multiple of N. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8 pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src1",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_scl",
                                                                                            "direction": "in",
                                                                                            "type": "unsigned char",
                                                                                            "arrays":[""]
                                                                                            
                                                                          },
                                                                          {
                                                                                            "name": "_dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::addWeighted",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::addWeighted",
                                                        "target_domain": "PL",
                                                        "display_name": "addWeighted",
                                                        "brief": "The addweighted function calculates a weighted sum of two input images src1, src2 and generates the result in dst. dst(x,y)= src1(x,y)*alpha+src2(x,y)*beta+ gamma",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_add_weighted.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. Only 8-bit, unsigned, 1 and 3 channels are supported (XF_8UC1 and XF_8UC3) ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]

                                                                          },
                                                                          {
                                                                                            "name": "DST_T",
                                                                                            "type": "int",
                                                                                            "description": " Output pixel type. Only 8-bit, unsigned, 1 and 3 channels are supported (XF_8UC1 and XF_8UC3)",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]

                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. In case of N-pixel parallelism, width should be multiple of N "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8 pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]

                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src1",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "alpha",
                                                                                            "direction": "in",
                                                                                            "type": "float"
                                                                          },
                                                                          {
                                                                                            "name": "_src2",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "beta",
                                                                                            "direction": "in",
                                                                                            "type": "float"
                                                                          },
                                                                          {
                                                                                            "name": "gamma",
                                                                                            "direction": "in",
                                                                                            "type": "float"
                                                                          },
                                                                          {
                                                                                            "name": "_dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::autoexposurecorrection",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::autoexposurecorrection",
                                                        "target_domain": "PL",
                                                        "display_name": "autoexposurecorrection",
                                                        "brief": "Auto exposure correction improves contrast and brightness of the image and also corrects the exposure of the input frame. The algorithm uses luminence histogram equalization to improve overall exposure and contrast of the image. Luminence (V) is extracted after converting input image to HSV color space. Once the algorthm is applied the image is converted back to RGB color space.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_aec.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. Only 8-bit, unsigned, 1 and 3 channels are supported XF_8UC3 ",
                                                                                            "enum": ["XF_8UC3"]

                                                                          },
                                                                          {
                                                                                            "name": "DST_T",
                                                                                            "type": "int",
                                                                                            "description": " Output pixel type. Only 8-bit, unsigned, 1 and 3 channels are supported XF_8UC3 ",
                                                                                            "enum": ["XF_8UC3"]

                                                                          },
                                                                          {
                                                                                            "name": "SIN_CHANNEL_TYPE",
                                                                                            "type": "int",
                                                                                            "description": " Single channel type. should be XF_8UC1 ",
                                                                                            "enum": ["XF_8UC1"]

                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. In case of N-pixel parallelism, width should be multiple of N. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible options is XF_NPPC1, XF_NPPC8 AND so on ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8","XF_NPPC2", "XF_NPPC4"]

                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "src",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "hist_array1",
                                                                                            "direction": "in",
                                                                                            "type": "unsigned int",
                                                                                            "arrays":["1","256"]

                                                                          },
                                                                          {
                                                                                            "name": "hist_array2",
                                                                                            "direction": "in",
                                                                                            "type": "unsigned int",
                                                                                            "arrays":["1","256"]
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::AWBhistogram",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::AWBhistogram",
                                                        "target_domain": "PL",
                                                        "display_name": "AWBhistogram",
                                                        "brief": "**Grayworld whitebalancing algorithm:** This algorithm scales the values of pixels based on a gray-world assumption which states that the average of all channels should result in a gray image. It adds a modification which thresholds pixels based on their saturation value and only uses pixels below the provided threshold in finding average pixel values. Saturation is calculated using the following for a 3-channel RGB image per pixel I and is in the range [0, 1]: |image161| A threshold of 1 means that all pixels are used to white-balance, while a threshold of 0 means no pixels are used. Lower thresholds are useful in white-balancing saturated images. **Simple whitebalancing algorithm:** A simple white balance algorithm that works by independently stretching each of the input image channels to the specified range(maximum and minimum). Computes channel wise intensity histogram and ignores p% maximum and minimum values and finally normalize each channel with min and max. For increased robustness it ignores the top and bottom :math:`p\\%\\ \\ (4\\%\\ is\\ fixed)` \\ of pixel values.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_autowhitebalance.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. Only 8-bit, unsigned, 1 and 3 channels are supported (XF_8UC1 and XF_8UC3)",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]

                                                                          },
                                                                          {
                                                                                            "name": "DST_T",
                                                                                            "type": "int",
                                                                                            "description": " Ouput pixel type. Only 8-bit, unsigned, 1 and 3 channels are supported (XF_8UC1 and XF_8UC3)",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]

                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image (Must be multiple of NPC) "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image (Must be multiple of NPC) "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": "Number of pixels to be processed per cycle; possible options is XF_NPPC1, XF_NPPC8 AND so on ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]

                                                                                            
                                                                          },
                                                                          {
                                                                                            "name": "USE_URAM",
                                                                                            "type": "int",
                                                                                            "description": " Enable to map storage structures to UltraRAM. "
                                                                          },
                                                                          {
                                                                                            "name": "WB_TYPE",
                                                                                            "type": "int",
                                                                                            "description": " White balance type. Supported types are Gray world and simple. ",
                                                                                            "enum": ["XF_WB_GRAY"]
                                                                          },
                                                                          {
                                                                                            "name": "HIST_SIZE",
                                                                                            "type": "int",
                                                                                            "description": " Histogram size. for 8 bit HIST_SIZE should be 256"
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "src1",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "dst1",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "histogram",
                                                                                            "direction": "out",
                                                                                            "type": "uint32_t",
                                                                                            "arrays":["3","HIST_SIZE"]

                                                                          },
                                                                          {
                                                                                            "name": "thresh",
                                                                                            "direction": "in",
                                                                                            "type": "uint32_t"
                                                                          },
                                                                          {
                                                                                            "name": "inputMin",
                                                                                            "direction": "in",
                                                                                            "type": "float"
                                                                          },
                                                                          {
                                                                                            "name": "inputMax",
                                                                                            "direction": "in",
                                                                                            "type": "float"
                                                                          },
                                                                          {
                                                                                            "name": "outputMin",
                                                                                            "direction": "in",
                                                                                            "type": "float"
                                                                          },
                                                                          {
                                                                                            "name": "outputMax",
                                                                                            "direction": "in",
                                                                                            "type": "float"
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::badpixelcorrection",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::badpixelcorrection",
                                                        "target_domain": "PL",
                                                        "display_name": "badpixelcorrection",
                                                        "brief": "An image sensor may have a certain number of defective/bad pixels that may be the result of manufacturing faults or variations in pixel voltage levels based on temperature or exposure. The Badpixelcorrection module removes the defective pixels in the image using below operation. If the middle pixel value is lesser than minimum neighborhood value, will consider minimum neighborhood value as mid pixel, otherwise mid pixel value is greater than maximum neighborhood value, will consider maximum neighborhood as mid pixel.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_bpc.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "TYPE",
                                                                                            "type": "int",
                                                                                            "description": " Input and Output Pixel Type. ",
                                                                                            "enum": ["XF_8UC1", "XF_16UC1"]

                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image (Must be multiple of NPPC) "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image (Must be multiple of NPPC) "
                                                                          },
                                                                          {
                                                                                            "name": "NPPC",
                                                                                            "type": "int",
                                                                                            "description": "",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]

                                                                          },
                                                                          {
                                                                                            "name": "BORDER_T",
                                                                                            "type": "int",
                                                                                            "description": " Border Type supported is XF_BORDER_CONSTANT ",
                                                                                            "enum" : ["XF_BORDER_CONSTANT"]
                                                                          },
                                                                          {
                                                                                            "name": "USE_URAM",
                                                                                            "type": "int",
                                                                                            "description": " Enable to map storage structures to UltraRAM. "
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<TYPE, ROWS, COLS, NPPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<TYPE, ROWS, COLS, NPPC> & "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::bfMatcher",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::bfMatcher",
                                                        "target_domain": "PL",
                                                        "display_name": "bfMatcher",
                                                        "brief": "Bf matcher takes the descriptor of one feature in first set and is matched  with all other features in second set and the closest one is returned.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_bfmatcher.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "PU",
                                                                                            "type": "int",
                                                                                            "description": " Parallel units / compute units. Number of parallel matches computed. Default is '1'. Increasing this parameter results in lesser compute time, but also consumes more hardware resources. "
                                                                          },
                                                                          {
                                                                                            "name": "MAX_KEYPOINTS",
                                                                                            "type": "int",
                                                                                            "description": " Maximum keypoints in the query and training feature sets. "
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "desc_list_q",
                                                                                            "direction": "in",
                                                                                            "type": "ap_uint<256>",
                                                                                            "arrays":["MAX_KEYPOINTS"]

                                                                          },
                                                                          {
                                                                                            "name": "desc_list_t",
                                                                                            "direction": "in",
                                                                                            "type": "ap_uint<256>",
                                                                                            "arrays":["MAX_KEYPOINTS"]

                                                                          },
                                                                          {
                                                                                            "name": "match_list",
                                                                                            "direction": "out",
                                                                                            "type": "ap_int<16>",
                                                                                            "arrays":["MAX_KEYPOINTS"]

                                                                          },
                                                                          {
                                                                                            "name": "num_keypoints_q",
                                                                                            "direction": "in",
                                                                                            "type": "ap_uint<32>"
                                                                          },
                                                                          {
                                                                                            "name": "num_keypoints_t",
                                                                                            "direction": "in",
                                                                                            "type": "ap_uint<32>"
                                                                          },
                                                                          {
                                                                                            "name": "ratio_thresh",
                                                                                            "direction": "in",
                                                                                            "type": "float"
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::bilateralFilter",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::bilateralFilter",
                                                        "target_domain": "PL",
                                                        "display_name": "bilateralFilter",
                                                        "brief": "In general, any smoothing filter smoothens the image which will affect the edges of the image. To preserve the edges while smoothing, a bilateral filter can be used. In an analogous way as the Gaussian filter, the bilateral filter also considers the neighboring pixels with weights assigned to each of them. These weights have two components, the first of which is the same weighing used by the Gaussian filter. The second component takes into account the difference in the intensity between the neighboring pixels and the evaluated one. | The bilateral filter applied on an image is: | |image10| | Where | |image11| | and |image12| is a gaussian filter with variance |image13|. The gaussian filter is given by: |image14|",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_bilateral_filter.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "WINDOW_SIZE",
                                                                                            "type": "int",
                                                                                            "description": " Filter size. Filter size of 3 (XF_FILTER_3X3), 5 (XF_FILTER_5X5) and 7 (XF_FILTER_7X7) are supported "

                                                                          },
                                                                          {
                                                                                            "name": "BORDER_TYPE",
                                                                                            "type": "int",
                                                                                            "description": " Border type supported is XF_BORDER_REPLICATE ",
                                                                                            "enum": ["XF_BORDER_REPLICATE"]
                                                                          },
                                                                          {
                                                                                            "name": "TYPE",
                                                                                            "type": "int",
                                                                                            "description": "Output pixel type. Only 8-bit, unsigned, 1 and 3 channels are supported (XF_8UC1 and XF_8UC3)",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                            
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image (must be multiple of 8, for 8-pixel operation) "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; this function supports XF_NPPC1 and XF_NPPC4. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC4"]

                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "src",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<TYPE, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<TYPE, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "sigma_space",
                                                                                            "direction": "in",
                                                                                            "type": "float"
                                                                          },
                                                                          {
                                                                                            "name": "sigma_color",
                                                                                            "direction": "in",
                                                                                            "type": "float"
                                                                          }
                                                        ]
                                      }
                    },
                    {
                        "api_name": "xf::cv::blackLevelCorrection",
                                      "target_domain": "PL",
                        "spec": {
                                          "schema": "vitis_libraries_api_list_schema-1.0",
                                          "api_name": "xf::cv::blackLevelCorrection",
                                      "target_domain": "PL",
                                          "display_name": "blackLevelCorrection",
                                          "brief": "Black level leads to the whitening of image in dark region and perceived loss of overall contrast The Blacklevelcorrection algorithm corrects the black and white levels of the overall image",
                                          
                                          "header_file_name": [
                                                            "imgproc/xf_black_level.hpp"
                                          ],
                                          "search_paths": [
                                                            "L1/include/"
                                          ],
                                          "instance": "function",
                                          "parameters": [
                                                            {
                                                                              "name": "SRC_T",
                                                                              "type": "int",
                                                                              "description": "Input pixel type. 8/10/12/16-bit unsigned 1 channel are supported (XF_8UC1, XF_10UC1, XF_12UC1, XF_16UC1). ",
                                                                              "enum": ["XF_8UC1", "XF_10UC1", "XF_12UC1", "XF_16UC1"]

                                                            },
                                                            {
                                                                              "name": "MAX_ROWS",
                                                                              "type": "int",
                                                                              "minimum": 16,
                                                                              "maximum": 2160,
                                                                              "description": " Maximum height of input and output image. "
                                                            },
                                                            {
                                                                              "name": "MAX_COLS",
                                                                              "type": "int",
                                                                              "minimum": 16,
                                                                              "maximum": 3840,
                                                                              "description": "Maximum width of input and output image. In case of N-pixel parallelism, width should be multiple of N. "
                                                            },
                                                            {
                                                                              "name": "NPC",
                                                                              "type": "int",
                                                                              "description": " Number of pixels to be processed per cycle; possible options are XF_NPPC1, XF_NPPC2 AND so on ",
                                                                                "enum": ["XF_NPPC1", "XF_NPPC8","XF_NPPC2", "XF_NPPC4"]

                                                            },
                                                            {
                                                                                "name": "MUL_VALUE_WIDTH",
                                                                                "type": "int",
                                                                                "description": " Width of multiplication factor."
                                                            },
                                                            {
                                                                                "name": "FL_POS",
                                                                                "type": "int",
                                                                                "description": " Number of fractional bits in multiplication factor. "
                                                            },
                                                            {
                                                                                "name": "USE_DSP",
                                                                                "type": "int",
                                                                                "description": "Enables usage of DSP for multiplication. "
                                                            }
                                          ],
                                          "ports": [
                                                            {
                                                                              "name": "_Src",
                                                                              "direction": "in",
                                                                              "type": "xf::cv::Mat<SRC_T, MAX_ROWS, MAX_COLS, NPC>& "
                                                            },
                                                            {
                                                                              "name": "_Dst",
                                                                              "direction": "out",
                                                                              "type": "xf::cv::Mat<SRC_T, MAX_ROWS, MAX_COLS, NPC>& "
                                                            },
                                                            {
                                                                              "name": "black_level",
                                                                              "direction": "in",
                                                                              "type": "unsigned short"
                                                            },
                                                            {
                                                                              "name": "mul_value",
                                                                              "direction": "in",
                                                                              "type": "int"
                                                            }
                                          ]
                        } 
                    },    
  {
                                      "api_name": "xf::cv::bitwise_and",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::bitwise_and",
                                                        "target_domain": "PL",
                                                        "display_name": "bitwise_and",
                                                        "brief": "The ``bitwise_and`` function performs the bitwise AND operation for each pixel between two input images, and returns an output image.  |image15| Where, -  |image16| is the intensity of output image at (x, y) position -  |image17| is the intensity of first input image at (x, y) position -  |image18| is the intensity of second input image at (x, y) position",
                                                        
                                                        "header_file_name": [
                                                                          "core/xf_arithm.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input and output pixel type. Supports 1 channel and 3 channels (XF_8UC1 and XF_8UC3) ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]

                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image (must be a multiple of 8, for 8 pixel mode) "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8 pixel operations, respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]

                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "src1",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "src2",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::bitwise_not",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::bitwise_not",
                                                        "target_domain": "PL",
                                                        "display_name": "bitwise_not",
                                                        "brief": "The ``bitwise_not`` function performs the pixel wise bitwise NOT operation for the pixels in the input image, and returns an output image. |image19| Where, -  |image20| is the intensity of output image at (x, y) position -  |image21| is the intensity of input image at (x, y) position",
                                                        
                                                        "header_file_name": [
                                                                          "core/xf_arithm.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input and output pixel type. Supports 1 channel and 3 channels (XF_8UC1 and XF_8UC3). ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. Must be a multiple of 8 for 8 pixel mode. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8 pixel operations, respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "src",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::bitwise_or",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::bitwise_or",
                                                        "target_domain": "PL",
                                                        "display_name": "bitwise_or",
                                                        "brief": "The ``bitwise_or`` function performs the pixel wise bitwise OR operation between two input images, and returns an output image.  |image22| Where, -  |image23| is the intensity of output image at (x, y) position -  |image24| is the intensity of first input image at (x, y) position -  |image25| is the intensity of second input image at (x, y) position",
                                                        
                                                        "header_file_name": [
                                                                          "core/xf_arithm.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input and output pixel type. Supports 1 channel and 3 channels (XF_8UC1 and XF_8UC3). ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. Must be multiple of 8, for 8 pixel mode. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8 pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "src1",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "src2",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::bitwise_xor",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::bitwise_xor",
                                                        "target_domain": "PL",
                                                        "display_name": "bitwise_xor",
                                                        "brief": "The ``bitwise_xor`` function performs the pixel wise bitwise XOR operation between two input images, and returns an output image, as shown below: |image26| Where, -  |image27| is the intensity of output image at (x, y) position -  |image28| is the intensity of first input image at (x, y) position -  |image29| is the intensity of second input image at (x, y) position .. _api-syntax-15:",
                                                        
                                                        "header_file_name": [
                                                                          "core/xf_arithm.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input and output pixel type. Supports 1 channel and 3 channels (XF_8UC1 and XF_8UC3). ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. Must be multiple of 8, for 8 pixel mode. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8 pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "src1",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "src2",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::boundingbox",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::boundingbox",
                                                        "target_domain": "PL",
                                                        "display_name": "boundingbox",
                                                        "brief": "The ``boundingbox`` function highlights the region of interest (ROI) from the input image using below equations. P(X,Y) \u2264 P(xi, yi) \u2264 P(X,Y\u2019) P(X\u2019,Y) \u2264 P(xi, yi) \u2264 P(X\u2019,Y\u2019) Where, -  P(xi, yi) - Current pixel location -  P(X,Y) - Top left corner of ROI -  P(X,Y\u2019) - Top right corner of ROI -  P(X\u2019,Y) - Bottom left corner of ROI -  P(X\u2019,Y\u2019) - Bottom Right of ROI",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_boundingbox.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel Type. Only 8-bit, unsigned, 1 channel and 3 channel is supported (XF_8UC1,XF_8UC3). ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. Must be multiple of NPC. "
                                                                          },
                                                                          {
                                                                                            "name": "MAX_BOXES",
                                                                                            "type": "int",
                                                                                            "description": " Maximum number of boxes, fixed to 5. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible options are XF_NPPC1 only ",
                                                                                            "enum": ["XF_NPPC1"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src_mat",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "roi",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Rect_<int> *"
                                                                          },
                                                                          {
                                                                                            "name": "color",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Scalar<4,unsigned char > *"
                                                                          },
                                                                          {
                                                                                            "name": "num_box",
                                                                                            "direction": "in",
                                                                                            "type": "int"
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::boxFilter",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::boxFilter",
                                                        "target_domain": "PL",
                                                        "display_name": "boxFilter",
                                                        "brief": "The ``boxFilter`` function performs box filtering on the input image. Box filter acts as a low-pass filter and performs blurring over the image. The ``boxFilter`` function or the box blur is a spatial domain linear filter in which each pixel in the resulting image has a value equal to the average value of the neighboring pixels in the image. |image30|",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_box_filter.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "BORDER_TYPE",
                                                                                            "type": "int",
                                                                                            "description": " Border Type supported is XF_BORDER_CONSTANT ",
                                                                                            "enum": ["XF_BORDER_CONSTANT"]
                                                                          },
                                                                          {
                                                                                            "name": "FILTER_TYPE",
                                                                                            "type": "int",
                                                                                            "description": "Filter size. Filter size of 3 , 5  and 7  are supported."
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input and output pixel type. 8-bit, unsigned, 16-bit unsigned and 16-bit signed, 1 channel is supported (XF_8UC1) ",
                                                                                            "enum": ["XF_8UC1","XF_16UC1","XF_16SC1"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image (must be multiple of 8, for 8-pixel operation) "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8 pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          },
                                                                          {
                                                                                            "name": "USE_URAM",
                                                                                            "type": "bool",
                                                                                            "description": " Enable to map storage structures to UltraRAM "
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src_mat",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst_mat",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::calcHist",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::calcHist",
                                                        "target_domain": "PL",
                                                        "display_name": "calcHist",
                                                        "brief": "| The ``calcHist`` function computes the histogram of given input image. | |image83| | Where, H is the array of 256 elements.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_histogram.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. Only 8-bit, unsigned, 1 and 3 channels are supported (XF_8UC1 and XF_8UC3) ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image (must be multiple of 8, for 8-pixel operation) "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "histogram",
                                                                                            "direction": "out",
                                                                                            "type": "uint32_t *"
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::Canny",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::Canny",
                                                        "target_domain": "PL",
                                                        "display_name": "Canny",
                                                        "brief": "The Canny edge detector finds the edges in an image or video frame. It is one of the most popular algorithms for edge detection. Canny algorithm aims to satisfy three main criteria: #. Low error rate: A good detection of only existent edges. #. Good localization: The distance between edge pixels detected and real    edge pixels have to be minimized. #. Minimal response: Only one detector response per edge. In this algorithm, the noise in the image is reduced first by applying a Gaussian mask. The Gaussian mask used here is the average mask of size 3x3. Thereafter, gradients along x and y directions are computed using the Sobel gradient function. The gradients are used to compute the magnitude and phase of the pixels. The phase is quantized and the pixels are binned accordingly. Non-maximal suppression is applied on the pixels to remove the weaker edges. Edge tracing is applied on the remaining pixels to draw the edges on the image. In this algorithm, the canny up to non-maximal suppression is in one kernel and the edge linking module is in another kernel. After non-maxima suppression, the output is represented as 2-bit per pixel, Where: -  ``00`` - represents the background -  ``01`` - represents the weaker edge -  ``11`` - represents the strong edge The output is packed as 8-bit (four 2-bit pixels) in 1 pixel per cycle operation and packed as 16-bit (eight 2-bit pixels) in 8 pixel per cycle operation. For the edge linking module, the input is 64-bit, such 32 pixels of 2-bit are packed into a 64-bit. The edge tracing is applied on the pixels and returns the edges in the image.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_canny.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "FILTER_TYPE",
                                                                                            "type": "int",
                                                                                            "description": " The filter window dimensions. The options are 3 and 5. "
                                                                          },
                                                                          {
                                                                                            "name": "NORM_TYPE",
                                                                                            "type": "int",
                                                                                            "description": " The type of norm used. The options for norm type are L1NORM and L2NORM. ",
                                                                                            "enum":["XF_L1NORM","XF_L2NORM"]
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. Only 8-bit, unsigned, 1 channel is supported (XF_8UC1) ",
                                                                                            "enum": ["XF_8UC1"]
                                                                          },
                                                                          {
                                                                                            "name": "DST_T",
                                                                                            "type": "int",
                                                                                            "description": " Output pixel type. Only XF_2UC1 is supported. The output in case of NPC=XF_NPPC1 is 8-bit and packing four 2-bit pixel values into 8-bit. The output in case of NPC=XF_NPPC8 is 16-bit, 8-bit, 2-bit pixel values are packing into 16-bit. ",
                                                                                            "enum":["XF_2UC1"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image (must be a multiple of 8, in case of 8 pixel mode) "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": "is 8-bit and packing four 2-bit pixel values into 8-bit. The output in case of NPC=XF_NPPC8 is 16-bit, 8-bit, 2-bit pixel values are packing into 16-bit. ",
                                                                                            "enum": ["XF_NPPC1"]
                                                                          },
                                                                          {
                                                                                            "name": "NPC1",
                                                                                            "type": "int",
                                                                                            "description": " The output NPC is 32.Packing 2bit, 32 pixels into 64 bit pointer ",
                                                                                            "enum":["XF_NPPC32"]
                                                                          },
                                                                          {
                                                                                            "name": "USE_URAM",
                                                                                            "type": "bool",
                                                                                            "description": " Enable to map some storage structures to URAM "

                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src_mat",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst_mat",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_T, ROWS, COLS, NPC1> & "
                                                                          },
                                                                          {
                                                                                            "name": "_lowthreshold",
                                                                                            "direction": "in",
                                                                                            "type": "unsigned char"
                                                                          },
                                                                          {
                                                                                            "name": "_highthreshold",
                                                                                            "direction": "in",
                                                                                            "type": "unsigned char"
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::ccaCustom",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::ccaCustom",
                                                        "target_domain": "PL",
                                                        "display_name": "ccaCustom",
                                                        "brief": "The ``custom CCA`` function takes a binary image as input which contains a  fruit on a conveyer belt (black background) and returns the total fruit pixels  minus defect, total defect pixels and defect image  which has the defects marked as  '255'. This function is a custom made solution for defect detection in fruit, which  ideally works with other pre-processing functions. The custom CCA algorthm works in two-passes. The first pass includes labelling the  background, foreground and defect in forward and reverse raster-scan. The second pass  to perform an '&' operation over the forward and reverse partial output data. ",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_cca_custom.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "HEIGHT",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "WIDTH",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. "
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "in_ptr1",
                                                                                            "direction": "in",
                                                                                            "type": "uint8_t* "
                                                                          },
                                                                          {
                                                                                            "name": "in_ptr2",
                                                                                            "direction": "in",
                                                                                            "type": "uint8_t* "
                                                                          },
                                                                          {
                                                                                            "name": "tmp_out_ptr1",
                                                                                            "direction": "out",
                                                                                            "type": "uint8_t* "
                                                                          },
                                                                          {
                                                                                            "name": "tmp_out_ptr2",
                                                                                            "direction": "out",
                                                                                            "type": "uint8_t* "
                                                                          },
                                                                          {
                                                                                            "name": "out_ptr",
                                                                                            "direction": "out",
                                                                                            "type": "uint8_t* "
                                                                          },
                                                                          {
                                                                                            "name": "obj_pix",
                                                                                            "direction": "in",
                                                                                            "type": "int& "
                                                                          },
                                                                          {
                                                                                            "name": "def_pix",
                                                                                            "direction": "in",
                                                                                            "type": "int& "
                                                                          },
                                                                          {
                                                                                            "name": "height",
                                                                                            "direction": "in",
                                                                                            "type": "int"
                                                                          },
                                                                          {
                                                                                            "name": "width",
                                                                                            "direction": "in",
                                                                                            "type": "int"
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::colorcorrectionmatrix",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::colorcorrectionmatrix",
                                                        "target_domain": "PL",
                                                        "display_name": "colorcorrectionmatrix",
                                                        "brief": "Color correction matrix algorithm converts the input image color format to output image color format using the colorcorrection matrix provided by the user (CCM_TYPE).",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_colorcorrectionmatrix.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "CCM_TYPE",
                                                                                            "type": "int",
                                                                                            "description": " colorcorrection matrix. ",
                                                                                            "enum":["XF_CCM_bt2020_bt709", "XF_CCM_bt709_bt2020", "XF_CCM_rgb_yuv_601", "XF_CCM_rgb_yuv_709", "XF_CCM_rgb_yuv_2020", "XF_CCM_yuv_rgb_601", "XF_CCM_yuv_rgb_709", "XF_CCM_yuv_rgb_2020", "XF_CCM_full_from_16_235", "XF_CCM_full_to_16_235"]
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. 8/10/12/16-bit unsigned, 3 channel are supported (XF_8UC3, XF_10UC3, XF_12UC3, XF_16UC3). ",
                                                                                            "enum": ["XF_8UC3", "XF_16UC3"]

                                                                          },
                                                                          {
                                                                                            "name": "DST_T",
                                                                                            "type": "int",
                                                                                            "description": " Output pixel type. 8/10/12/16-bit unsigned, 3 channel are supported (XF_8UC3, XF_10UC3, XF_12UC3, XF_16UC3). ",
                                                                                            "enum": ["XF_8UC3", "XF_16UC3"]

                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. In case of N-pixel parallelism, width should be multiple of N. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible options is XF_NPPC1, XF_NPPC2 AND so on ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]

                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src_mat",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "_dst_mat",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::compare",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::compare",
                                                        "target_domain": "PL",
                                                        "display_name": "compare",
                                                        "brief": "The Compare function performs the per element comparison of pixels in two corresponding images src1, src2 and stores the result in dst. dst(x,y)=src1(x,y) CMP_OP src2(x,y) CMP_OP \u2013 a flag specifies correspondence between the pixels. -  XF_CMP_EQ : src1 is equal to src2 -  XF_CMP_GT : src1 is greater than src2 -  XF_CMP_GE : src1 is greater than or equal to src2 -  XF_CMP_LT : src1 is less than src2 -  XF_CMP_LE : src1 is less than or equal to src2 -  XF_CMP_NE : src1 is unequal to src2 If the comparison result is true, then the corresponding element of dst is set to 255; else it is set to 0.",
                                                        
                                                        "header_file_name": [
                                                                          "core/xf_arithm.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "CMP_OP",
                                                                                            "type": "int",
                                                                                            "description": " The flag that specify the relation between the elements needs to be checked "
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input Pixel Type. 8-bit, unsigned, 1 channel is supported (XF_8UC1) ",
                                                                                            "enum": ["XF_8UC1"]

                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. In case of N-pixel parallelism, width should be multiple of N "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8 pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]

                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src1",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_src2",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::compare",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::compare",
                                                        "target_domain": "PL",
                                                        "display_name": "compare",
                                                        "brief": "The CompareS function performs the comparison of a pixel in the input image (src1) and the given scalar value scl, and stores the result in dst. dst(x,y)=src1(x,y) CMP_OP scalar CMP_OP \u2013 a flag specifies correspondence between the pixel and the scalar. -  XF_CMP_EQ : src1 is equal to scl -  XF_CMP_GT : src1 is greater than scl -  XF_CMP_GE : src1 is greater than or equal to scl -  XF_CMP_LT : src1 is less than scl -  XF_CMP_LE : src1 is less than or equal to scl -  XF_CMP_NE : src1 is unequal to scl If the comparison result is true, then the corresponding element of dst is set to 255, else it is set to 0.",
                                                        
                                                        "header_file_name": [
                                                                          "core/xf_arithm.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "CMP_OP",
                                                                                            "type": "int",
                                                                                            "description": " The flag that specifying the relation between the elements to be checked "
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. 8-bit, unsigned, 1 channel is supported (XF_8UC1). ",
                                                                                            "enum": ["XF_8UC1"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. In case of N-pixel parallelism, the width should be a multiple of N "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8 pixels operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src1",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_scl",
                                                                                            "direction": "in",
                                                                                            "type": "unsigned char",
                                                                                            "arrays":[""]

                                                                          },
                                                                          {
                                                                                            "name": "_dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          }
                                                        ]
                                      }
                    },
                    {
                                      "api_name": "xf::cv::convertScaleAbs",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::convertScaleAbs",
                                                        "target_domain": "PL",
                                                        "display_name": "convertScaleAbs",
                                                        "brief": "The ``convertScaleAbs`` function converts an input image src with optional linear transformation, save the result as image dst. dst(x,y)= src1(x,y)*scale+shift",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_convertscaleabs.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. Only 8-bit, unsigned, 1 channel is supported (XF_8UC1). ",
                                                                                            "enum": ["XF_8UC1"]

                                                                          },
                                                                          {
                                                                                            "name": "DST_T",
                                                                                            "type": "int",
                                                                                            "description": " Output pixel type. Only 8-bit, unsigned, 1 channel is supported (XF_8UC1). ",
                                                                                            "enum": ["XF_8UC1"]

                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. In case of N-pixel parallelism, width should be multiple of N. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8 pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]

                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "src1",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "scale",
                                                                                            "direction": "in",
                                                                                            "type": "float"
                                                                          },
                                                                          {
                                                                                            "name": "shift",
                                                                                            "direction": "in",
                                                                                            "type": "float"
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::convertTo",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::convertTo",
                                                        "target_domain": "PL",
                                                        "display_name": "convertTo",
                                                        "brief": "The ``convertTo`` function converts the input image bit depth to the required bit depth in the output image.",
                                                        
                                                        "header_file_name": [
                                                                          "core/xf_convert_bitdepth.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. 8-bit, unsigned, 1 channel (XF_8UC1), 16-bit, unsigned, 1 channel (XF_16UC1), 16-bit, signed, 1 channel (XF_16SC1), 32-bit, signed, 1 channel (XF_32SC1) are supported. ",
                                                                                            "enum": ["XF_8UC1", "XF_16UC1", "XF_16SC1", "XF_32SC1"]

                                                                          },
                                                                          {
                                                                                            "name": "DST_T",
                                                                                            "type": "int",
                                                                                            "description": " Output pixel type. 8-bit, unsigned, 1 channel (XF_8UC1), 16-bit, unsigned, 1 channel (XF_16UC1), 16-bit, signed, 1 channel (XF_16SC1), 32-bit, signed, 1 channel (XF_32SC1) are supported. ",
                                                                                            "enum": ["XF_8UC1", "XF_16UC1", "XF_16SC1", "XF_32SC1"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Height of input and output images "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Width of input and output images "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8 pixel operations respectively. XF_NPPC8 is not supported with the 32-bit input and output pixel type. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src_mat",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst_mat",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_convert_type",
                                                                                            "direction": "in",
                                                                                            "type": "ap_uint<4>"
                                                                          },
                                                                          {
                                                                                            "name": "_shift",
                                                                                            "direction": "in",
                                                                                            "type": "int"
                                                                          }
                                                        ]
                                      }
                    },
                    {
                                      "api_name": "xf::cv::cornerHarris",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::cornerHarris",
                                                        "target_domain": "PL",
                                                        "display_name": "cornerHarris",
                                                        "brief": "In order to understand Harris Corner Detection, let us consider a grayscale image. Sweep a window ``w(x,y)`` (with displacements ``u`` in the x-direction and ``v`` in the y-direction), ``I`` calculates the variation of intensity ``w(x,y)``. |  | |image74| Where: -  ``w(x,y)`` is the window position at (x,y) -  ``I(x,y)`` is the intensity at (x,y) -  ``I(x+u,y+v)`` is the intensity at the moved window ``(x+u,y+v)``. Since we are looking for windows with corners, we are looking for windows with a large variation in intensity. Hence, we have to maximize the equation above, specifically the term: |  | |image75| Using Taylor expansion: |  | |image76| Expanding the equation and cancelling ``I(x,y)`` with ``-I(x,y)``: |  | |image77| The above equation can be expressed in a matrix form as: |  | |image78| So, our equation is now: |  | |image79| A score is calculated for each window, to determine if it can possibly contain a corner: |  | |image80| | Where,  -  |image81| -  |image82|",
                                                        
                                                        "header_file_name": [
                                                                          "features/xf_harris.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "FILTERSIZE",
                                                                                            "type": "int",
                                                                                            "description": " Size of the Sobel filter. 3, 5, and 7 supported. "
                                                                          },
                                                                          {
                                                                                            "name": "BLOCKWIDTH",
                                                                                            "type": "int",
                                                                                            "description": " Size of the box filter. 3, 5, and 7 supported. "
                                                                          },
                                                                          {
                                                                                            "name": "NMSRADIUS",
                                                                                            "type": "int",
                                                                                            "description": " Radius considered for non-maximum suppression. Values supported are 1 and 2. "
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": "Input pixel type. Only 8-bit, unsigned, 1 channel is supported (XF_8UC1).",
                                                                                            "enum": ["XF_8UC1"]

                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input image (must be multiple of 8, for 8-pixel operation) "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8 pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]

                                                                          },
                                                                          {
                                                                                            "name": "USE_URAM",
                                                                                            "type": "bool",
                                                                                            "description": " Enable to map some storage structures to URAM "
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "src",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "threshold",
                                                                                            "direction": "in",
                                                                                            "type": "uint16_t"
                                                                          },
                                                                          {
                                                                                            "name": "k",
                                                                                            "direction": "in",
                                                                                            "type": "uint16_t"
                                                                          }
                                                        ]
                                      }
                    },
                    {
                                    "api_name": "xf::cv::hdr_decompand",
                                      "target_domain": "PL",
                                    "spec": {
                                                    "schema": "vitis_libraries_api_list_schema-1.0",
                                                    "api_name": "xf::cv::hdr_decompand",
                                      "target_domain": "PL",
                                                    "display_name": "hdr_decompand",
                                                    "brief": "For imaging sensors that do not equip with high bit width in the transmission side, they can compress(compand) data in a piece-wise linear (PWL) mapping to a lower bit depth. The receiving end will do the inverse (or de-compand) to recover the data with satisfiable aliasing. This implementaion supports Bayer Raw data with 4 knee points PWL mapping and default equations are provided for 12bit to 20bit and 16bit to 24bit conversion.",
                                                    
                                                    "header_file_name": [
                                                                        "imgproc/xf_hdr_decompand.hpp"
                                                    ],
                                                    "search_paths": [
                                                                        "L1/include/"
                                                    ],
                                                    "instance": "function",
                                                    "parameters": [
                                                                        {
                                                                                        "name": "SRC_T",
                                                                                        "type": "int",
                                                                                        "description": "Input Pixel type. The current supported pixel value is XF_16UC1",
                                                                                        "enum": ["XF_16UC1"]

                                                                        },
                                                                        {
                                                                                        "name": "DST_T",
                                                                                        "type": "int",
                                                                                        "description": " Output Pixel type. The current supported pixel value is XF_32UC1 ",
                                                                                        "enum": ["XF_32UC1"]

                                                                        },
                                                                        {
                                                                                        "name": "ROWS",
                                                                                        "type": "int",
                                                                                        "minimum": 16,
                                                                                        "maximum": 2160,
                                                                                        "description": " Maximum height of the image that hardware kernel must be built for"
                                                                        },
                                                                        {
                                                                                        "name": "COLS",
                                                                                        "type": "int",
                                                                                        "minimum": 16,
                                                                                        "maximum": 3840,
                                                                                        "description": " Maximum width of the image that hardware kernel must be built for"
                                                                        },
                                                                        {
                                                                                        "name": "NPC",
                                                                                        "type": "int",
                                                                                        "description": " Number of Pixels to be processed per cycle. NPPC1 and NPPC2 are supported.",
                                                                                        "enum": ["XF_NPPC1", "XF_NPPC8"]

                                                                        }
                                                    ],
                                                    "ports": [
                                                                        {
                                                                                        "name": "src",
                                                                                        "direction": "in",
                                                                                        "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                        },
                                                                        {
                                                                                        "name": "dst",
                                                                                        "direction": "out",
                                                                                        "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>  &"
                                                                        },
                                                                        {
                                                                                        "name": "params",
                                                                                        "direction": "in",
                                                                                        "type": "int"
                                                                        },
                                                                        {
                                                                                        "name": "bayerp",
                                                                                        "direction": "in",
                                                                                        "type": "unsigned short"
                                                                        }
                                                    ]
                                    }
                    },
  {
                                      "api_name": "xf::cv::crop",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::crop",
                                                        "target_domain": "PL",
                                                        "display_name": "crop",
                                                        "brief": "The ``Crop`` function extracts the region of interest (ROI) from the input image. P(X,Y) \u2264 P(xi, yi) \u2264 P(X\u2019,Y\u2019) -  P(X,Y) - Top left corner of ROI -  P(X\u2019,Y\u2019) - Bottom Right of ROI .. figure:: ./images/cso1554997041637.png    :alt:     :figclass: image    :name: jru1540968767246__image_o2b_c3b_yfb",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_crop.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. Only 8-bit, unsigned, 1 and 3 channels are supported (XF_8UC1 and XF_8UC3). ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]


                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. Must be multiple of 8 for 8-pixel operation. "
                                                                          },
                                                                          {
                                                                                            "name": "ARCH_TYPE",
                                                                                            "type": "int",
                                                                                            "description": " Architecture type. 0 resolves to stream implementation and 1 resolves to memory mapped implementation. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle. NPC should be power of 2. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]

                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src_mat",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst_mat",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>  &"
                                                                          },
                                                                          {
                                                                                            "name": "roi",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Rect_<unsigned int> &"
                                                                          }
                                                        ]
                                      }
                    },
                    {
                                    "api_name": "xf::cv::custom_bgr2y8",
                                      "target_domain": "PL",
                                    "spec": {
                                                    "schema": "vitis_libraries_api_list_schema-1.0",
                                                    "api_name": "xf::cv::custom_bgr2y8",
                                      "target_domain": "PL",
                                                    "display_name": "custom_bgr2y8",
                                                    "brief": "Custom Y8 image is generated from bgr image using h, s, v values.",
                                                    
                                                    "header_file_name": [
                                                                        "imgproc/xf_custom_bgr2y8.hpp"
                                                    ],
                                                    "search_paths": [
                                                                        "L1/include/"
                                                    ],
                                                    "instance": "function",
                                                    "parameters": [
                                                                        {
                                                                                        "name": "SRC_T",
                                                                                        "type": "int",
                                                                                        "description": " Input Pixel type. The current supported pixel value is XF_8UC3 ",
                                                                                        "enum": ["XF_8UC3"]

                                                                        },
                                                                        {
                                                                                        "name": "DST_T",
                                                                                        "type": "int",
                                                                                        "description": " Output Pixel type. The current supported pixel value is XF_8UC1 ",
                                                                                        "enum": ["XF_8UC1"]

                                                                        },
                                                                        {
                                                                                        "name": "ROWS",
                                                                                        "type": "int",
                                                                                        "minimum": 16,
                                                                                        "maximum": 2160,
                                                                                        "description": " Maximum height of the image that hardware kernel must be built for"
                                                                        },
                                                                        {
                                                                                        "name": "COLS",
                                                                                        "type": "int",
                                                                                        "minimum": 16,
                                                                                        "maximum": 3840,
                                                                                        "description": " Maximum width of the image that hardware kernel must be built for"
                                                                        },
                                                                        {
                                                                                        "name": "NPC",
                                                                                        "type": "int",
                                                                                        "description": " Number of Pixels to be processed per cycle. NPPC1 and NPPC2 are supported.",
                                                                                        "enum": ["XF_NPPC1", "XF_NPPC8"]


                                                                        }
                                                    ],
                                                    "ports": [
                                                                        {
                                                                                        "name": "_src_mat",
                                                                                        "direction": "in",
                                                                                        "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                        },
                                                                        {
                                                                                        "name": "_dst_mat",
                                                                                        "direction": "out",
                                                                                        "type": "xf::cv::Mat<DST_T, ROWS, COLS, NPC>  &"
                                                                        },
                                                                        {
                                                                                        "name": "params",
                                                                                        "direction": "in",
                                                                                        "type": "struct bgr2y8_params"
                                                                        }
                                                    ]
                                    }
                    },
  {
                                      "api_name": "xf::cv::demosaicing",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::demosaicing",
                                                        "target_domain": "PL",
                                                        "display_name": "demosaicing",
                                                        "brief": "The Demosaicing function converts a single plane Bayer pattern output, from the digital camera sensors to a color image. This function implements an improved bi-linear interpolation technique proposed by Malvar, He, and Cutler. .. figure:: ./images/rco1554997039974.png    :alt:     :figclass: image    :name: wrr1540968923467__image_xg3_zjb_yfb The above figure shows the Bayer mosaic for color image capture in single-CCD digital cameras.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_demosaicing.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "BFORMAT",
                                                                                            "type": "int",
                                                                                            "description": " Input Bayer pattern. XF_BAYER_BG, XF_BAYER_GB, XF_BAYER_GR, and XF_BAYER_RG are the supported values. ",
                                                                                            "enum":["XF_BAYER_BG", "XF_BAYER_GB", "XF_BAYER_GR", "XF_BAYER_RG"]
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. 8-bit, unsigned,1 channel (XF_8UC1) and 16-bit, unsigned, 1 channel (XF_16UC1) are supported. ",
                                                                                            "enum": ["XF_8UC1", "XF_16UC1"]

                                                                          },
                                                                          {
                                                                                            "name": "DST_T",
                                                                                            "type": "int",
                                                                                            "description": " Output pixel type. 8-bit, unsigned, 4 channel (XF_8UC4) and 16-bit, unsigned, 4 channel (XF_16UC4) are supported. ",
                                                                                            "enum": ["XF_8UC1", "XF_16UC1"]

                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Number of rows in the image being processed. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Number of columns in the image being processed. Must be multiple of 8, in case of 8 pixel mode. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; single pixel parallelism (XF_NPPC1), two-pixel parallelism (XF_NPPC2) and four-pixel parallelism (XF_NPPC4) are supported. XF_NPPC4 is not supported with XF_16UC1 pixel type. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]

                                                                          },
                                                                          {
                                                                                            "name": "USE_URAM",
                                                                                            "type": "bool",
                                                                                            "description": " Enable to map storage structures to UltraRAM. "
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "src_mat",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> &"
                                                                          },
                                                                          {
                                                                                            "name": "dst_mat",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_T, ROWS, COLS, NPC> &"
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::dilate",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::dilate",
                                                        "target_domain": "PL",
                                                        "display_name": "dilate",
                                                        "brief": "During a dilation operation, the current pixel intensity is replaced by the maximum value of the intensity in a nxn neighborhood of the current pixel. |  | |image59|",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_dilation.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "BORDER_TYPE",
                                                                                            "type": "int",
                                                                                            "description": " Border Type supported is XF_BORDER_CONSTANT ",
                                                                                            "enum": ["XF_BORDER_CONSTANT"]
                                                                          },
                                                                          {
                                                                                            "name": "TYPE",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. Only 8-bit, unsigned, 1 and 3 channels are supported (XF_8UC1 and XF_8UC3)",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]

                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image (must be multiple of 8, for 8-pixel operation) "
                                                                          },
                                                                          {
                                                                                            "name": "K_SHAPE",
                                                                                            "type": "int",
                                                                                            "description": " Shape of the kernel . The supported kernel shapes are RECT, CROSS, and ELLIPSE. ",
                                                                                            "enum":["XF_SHAPE_RECT","XF_SHAPE_ELLIPSE","XF_SHAPE_CROSS"]
                                                                          },
                                                                          {
                                                                                            "name": "K_ROWS",
                                                                                            "type": "int",
                                                                                            "description": " Height of the kernel possible value is 3. "
                                                                          },
                                                                          {
                                                                                            "name": "K_COLS",
                                                                                            "type": "int",
                                                                                            "description": " Width of the kernel possible value is 3. "
                                                                          },
                                                                          {
                                                                                            "name": "ITERATIONS",
                                                                                            "type": "int",
                                                                                            "description": " Number of times the dilation is applied. Currently supporting for Rectangular shape kernel element. possible values are 1 and 2. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8 pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]


                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<TYPE, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<TYPE, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_kernel",
                                                                                            "direction": "in",
                                                                                            "type": "unsigned char",
                                                                                            "arrays":["K_ROWS * K_COLS"]

                                                                                            
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::distanceTransform",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::distanceTransform",
                                                        "target_domain": "PL",
                                                        "display_name": "distanceTransform",
                                                        "brief": "The distance transform is an operator normally only applied to binary  images, where in this case the image must be coded as zero and non-zero  pixels as a grayscale image. The result of the transform is a graylevel  image that looks similar to the input image, except that the graylevel  intensities of points inside foreground regions are changed to show the  distance to the closest boundary from each point. This Xilinx implementation applies 3x3 mask, of distance type DIST_L2  (Euclidean distance), with horizontal/vertical shift cost, a = 0.955, and  diagonal shift cost b = 1.3693. Computing the distance takes two passes, forward and backward. During the  forward pass, forward mask is applied, and while the backward pass the  backward mask is applied over the forward pass data. In this implementation, it is required to pass a cache memory for the  kernel to interact (write while forward pass, read while backward pass). The cache memory must be of image dimensions and of type ap_uint<32>.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_distancetransform.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "IN_PTR",
                                                                                            "type": "int",
                                                                                            "description": " Input pointer width must be '8'. "
                                                                          },
                                                                          {
                                                                                            "name": "FW_PTR",
                                                                                            "type": "int",
                                                                                            "description": " Forward pass data pointer width must be '32'. "
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum number of rows of the input image that the hardware kernel must be built for. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum number of columns of the input image that the hardware kernel must be built for. "
                                                                          },
                                                                          {
                                                                                            "name": "USE_URAM",
                                                                                            "type": "int",
                                                                                            "description": " Default is '0'. Can be set to '1', if the device has URAM support. "
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src",
                                                                                            "direction": "in",
                                                                                            "type": "ap_uint<IN_PTR>* "
                                                                          },
                                                                          {
                                                                                            "name": "_dst",
                                                                                            "direction": "out",
                                                                                            "type": "float* "
                                                                          },
                                                                          {
                                                                                            "name": "_fw_pass",
                                                                                            "direction": "in",
                                                                                            "type": "ap_uint<FW_PTR>* "
                                                                          },
                                                                          {
                                                                                            "name": "rows",
                                                                                            "direction": "in",
                                                                                            "type": "int"
                                                                          },
                                                                          {
                                                                                            "name": "cols",
                                                                                            "direction": "in",
                                                                                            "type": "int"
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::equalizeHist",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::equalizeHist",
                                                        "target_domain": "PL",
                                                        "display_name": "equalizeHist",
                                                        "brief": "The ``equalizeHist`` function performs histogram equalization on input image or video. It improves the contrast in the image, to stretch out the intensity range. This function maps one distribution (histogram) to another distribution (a wider and more uniform distribution of intensity values), so the intensities are spread over the whole range. For histogram H[i], the cumulative distribution H'[i] is given as: |  | |image84| The intensities in the equalized image are computed as: |  | |image85|",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_hist_equalize.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input and output pixel type. Only 8-bit, unsigned, 1 channel is supported (XF_8UC1) ",
                                                                                            "enum": ["XF_8UC1", "XF_16UC1"]

                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image (must be a multiple of 8, for 8-pixel operation) "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]

                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_src1",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::erode",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::erode",
                                                        "target_domain": "PL",
                                                        "display_name": "erode",
                                                        "brief": "The ``erode`` function finds the minimum pixel intensity in the NXN neighborhood of a pixel and replaces the pixel intensity with the minimum value. |  | |image60|",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_erosion.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "BORDER_TYPE",
                                                                                            "type": "int",
                                                                                            "description": " Border type supported is XF_BORDER_CONSTANT ",
                                                                                            "enum": ["XF_BORDER_CONSTANT"]
                                                                          },
                                                                          {
                                                                                            "name": "TYPE",
                                                                                            "type": "int",
                                                                                            "description": "Pixel type. Only 8-bit, unsigned, 1 and 3 channels are supported (XF_8UC1 and XF_8UC3)",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]

                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image (must be multiple of 8, for 8-pixel operation) "
                                                                          },
                                                                          {
                                                                                            "name": "K_SHAPE",
                                                                                            "type": "int",
                                                                                            "description": " Shape of the kernel . The supported kernel shapes are RECT,CROSS and ELLIPSE. ",
                                                                                            "enum":["XF_SHAPE_RECT","XF_SHAPE_ELLIPSE","XF_SHAPE_CROSS"]
                                                                          },
                                                                          {
                                                                                            "name": "K_ROWS",
                                                                                            "type": "int",
                                                                                            "description": " Height of the kernel. possible value is 3 "
                                                                          },
                                                                          {
                                                                                            "name": "K_COLS",
                                                                                            "type": "int",
                                                                                            "description": " Width of the kernel. possible value is 3"
                                                                          },
                                                                          {
                                                                                            "name": "ITERATIONS",
                                                                                            "type": "int",
                                                                                            "description": " Number of times the erosion is applied.Currently supporting for Rectangular shape kernel element. 1 and 2"
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8 pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]

                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<TYPE, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<TYPE, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_kernel",
                                                                                            "direction": "in",
                                                                                            "type": "unsigned char",
                                                                                            "arrays":["K_ROWS * K_COLS"]


                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::extractChannel",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::extractChannel",
                                                        "target_domain": "PL",
                                                        "display_name": "extractChannel",
                                                        "brief": "The ``extractChannel`` function splits a multi-channel array (32-bit pixel-interleaved data) into several single-channel arrays and returns a single channel. The channel to be extracted is specified by using the channel argument. The value of the channel argument is specified by macros defined in the ``xf_channel_extract_e`` enumerated data type. The following table summarizes the possible values for the ``xf_channel_extract_e`` enumerated data type: .. table:: Table 72. xf_channel_extract_e Enumerated Data Type Values    +------------+-----------------+    | Channel    | Enumerated Type |    +============+=================+    | Unknown    | XF_EXTRACT_CH_0 |    +------------+-----------------+    | Unknown    | XF_EXTRACT_CH_1 |    +------------+-----------------+    | Unknown    | XF_EXTRACT_CH_2 |    +------------+-----------------+    | Unknown    | XF_EXTRACT_CH_3 |    +------------+-----------------+    | RED        | XF_EXTRACT_CH_R |    +------------+-----------------+    | GREEN      | XF_EXTRACT_CH_G |    +------------+-----------------+    | BLUE       | XF_EXTRACT_CH_B |    +------------+-----------------+    | ALPHA      | XF_EXTRACT_CH_A |    +------------+-----------------+    | LUMA       | XF_EXTRACT_CH_Y |    +------------+-----------------+    | Cb/U       | XF_EXTRACT_CH_U |    +------------+-----------------+    | Cr/V/Value | XF_EXTRACT_CH_V |    +------------+-----------------+",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_channel_extract.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. Only 8-bit, unsigned, 4channel is supported (XF_8UC4) ",
                                                                                            "enum": ["XF_8UC3", "XF_8UC4", "XF_16UC3", "XF_16UC4"]

                                                                          },
                                                                          {
                                                                                            "name": "DST_T",
                                                                                            "type": "int",
                                                                                            "description": " Output pixel type. Only 8-bit, unsigned, 1 channel is supported (XF_8UC1) ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC1", "XF_16UC1", "XF_16UC1"]


                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. Must be multiple of 8 for 8 pixel mode "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible options are XF_NPPC1 for 1 pixel operation. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]

                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src_mat",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst_mat",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_channel",
                                                                                            "direction": "in",
                                                                                            "type": "uint16_t"
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::fast",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::fast",
                                                        "target_domain": "PL",
                                                        "display_name": "fast",
                                                        "brief": "Features from accelerated segment test (FAST) is a corner detection algorithm, that is faster than most of the other feature detectors. The ``fast`` function picks up a pixel in the image and compares the intensity of 16 pixels in its neighborhood on a circle, called the Bresenham's circle. If the intensity of 9 contiguous pixels is found to be either more than or less than that of the candidate pixel by a given threshold, then the pixel is declared as a corner. Once the corners are detected, the non-maximal suppression is applied to remove the weaker corners. This function can be used for both still images and videos. The corners are marked in the image. If the corner is found in a particular location, that location is marked with 255, otherwise it is zero.",
                                                        
                                                        "header_file_name": [
                                                                          "features/xf_fast.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "NMS",
                                                                                            "type": "int",
                                                                                            "description": " If NMS == 1, non-maximum suppression is applied to detected corners (keypoints). The value should be 0 or 1. "
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. Only 8-bit, unsigned, 1-channel is supported (XF_8UC1) ",
                                                                                            "enum": ["XF_8UC1"]

                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input image (must be a multiple of 8, for 8-pixel operation) "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8 pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]

                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src_mat",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst_mat",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_threshold",
                                                                                            "direction": "in",
                                                                                            "type": "unsigned char"
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::filter2D",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::filter2D",
                                                        "target_domain": "PL",
                                                        "display_name": "filter2D",
                                                        "brief": "This function calculates the Laplacian of the input image. This function internally uses the filter2D kernel to compute the Laplacian. The filter coefficients are calculated using cv::getDerivKernels OpenCV function on the host side. ",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_custom_convolution.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "BORDER_TYPE",
                                                                                            "type": "int",
                                                                                            "description": " Border Type supported is XF_BORDER_CONSTANT ",
                                                                                            "enum": ["XF_BORDER_CONSTANT"]
                                                                          },
                                                                          {
                                                                                            "name": "FILTER_WIDTH",
                                                                                            "type": "int",
                                                                                            "description": " Size of the box filter. 3, 5, and 7 supported."
                                                                          },
                                                                          {
                                                                                            "name": "FILTER_HEIGHT",
                                                                                            "type": "int",
                                                                                            "description": " Size of the box filter. 3, 5, and 7 supported. "
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. Only 8-bit, unsigned, 1 and 3 channels are supported (XF_8UC1 and XF_8UC3) ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]

                                                                          },
                                                                          {
                                                                                            "name": "DST_T",
                                                                                            "type": "int",
                                                                                            "description": " Output pixel type. 8-bit unsigned single and 3 channels (XF_8UC1, XF_8UC3) and 16-bit signed single and 3 channels (XF_16SC1, XF_16SC3) supported. ",
                                                                                            "enum": ["8UC1", "16SC1","8UC3", "16SC3"]

                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. Must be multiple of 8, for 8 pixel mode. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8 pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]

                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src_mat",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst_mat",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "filter",
                                                                                            "direction": "in",
                                                                                            "type": "short int",
                                                                                            "arrays":["FILTER_HEIGHT * FILTER_WIDTH"]

                                                                          },
                                                                          {
                                                                                            "name": "_shift",
                                                                                            "direction": "in",
                                                                                            "type": "unsigned char"
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::flip",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::flip",
                                                        "target_domain": "PL",
                                                        "display_name": "flip",
                                                        "brief": "The Flip function converts input image into output image which is a horizontal flip or vertical flip or both of input image,  based on user input.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_flip.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "PTR_WIDTH",
                                                                                            "type": "int",
                                                                                            "description": " Pixel Width of Input and Output Pointer "
                                                                          },
                                                                          {
                                                                                            "name": "TYPE",
                                                                                            "type": "int",
                                                                                            "description": " Input and Output Pixel type ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]

                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image (Must be multiple of NPC) "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image (Must be multiple of NPC) "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]

                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "SrcPtr",
                                                                                            "direction": "in",
                                                                                            "type": "ap_uint<PTR_WIDTH>* "
                                                                          },
                                                                          {
                                                                                            "name": "DstPtr",
                                                                                            "direction": "out",
                                                                                            "type": "ap_uint<PTR_WIDTH>* "
                                                                          },
                                                                          {
                                                                                            "name": "Rows",
                                                                                            "direction": "in",
                                                                                            "type": "int"
                                                                          },
                                                                          {
                                                                                            "name": "Cols",
                                                                                            "direction": "in",
                                                                                            "type": "int"
                                                                          },
                                                                          {
                                                                                            "name": "Direction",
                                                                                            "direction": "in",
                                                                                            "type": "int"
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::gaincontrol",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::gaincontrol",
                                                        "target_domain": "PL",
                                                        "display_name": "gaincontrol",
                                                        "brief": "The gain control modules improve the overall brightness of the input image. In this module, applying a multiplicative gain (weight) for red and blue channel of the input bayerized image.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_gaincontrol.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "BFORMAT",
                                                                                            "type": "int",
                                                                                            "description": " Input Bayer pattern. ",
                                                                                            "enum":["XF_BAYER_BG", "XF_BAYER_GB", "XF_BAYER_GR", "XF_BAYER_RG"]
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input and Output Pixel Type. ",
                                                                                            "enum": ["XF_8UC1", "XF_16UC1"]

                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image (Must be multiple of NPC) "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image (Must be multiple of NPC) "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": "  Number of pixels to be processed per cycle. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]

                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "src",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "rgain",
                                                                                            "direction": "in",
                                                                                            "type": "unsigned short"
                                                                          },
                                                                          {
                                                                                            "name": "bgain",
                                                                                            "direction": "in",
                                                                                            "type": "unsigned short"
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::gammacorrection",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::gammacorrection",
                                                        "target_domain": "PL",
                                                        "display_name": "gammacorrection",
                                                        "brief": "The gammacorrection modules improves the overall brightness of image. The gamma lookuptable is generated using the gamma value and with following equation. |image162| |image163|",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_gammacorrection.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input Pixel Type. ",
                                                                                            "enum": ["XF_8UC3"]

                                                                          },
                                                                          {
                                                                                            "name": "DST_T",
                                                                                            "type": "int",
                                                                                            "description": " Output Pixel Type. ",
                                                                                            "enum": ["XF_8UC3"]

                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image (Must be multiple of NPC) "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image (Must be multiple of NPC) "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": "  Number of pixels to be processed per cycle. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]

                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "src",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "lut_table",
                                                                                            "direction": "in",
                                                                                            "type": "unsigned char",
                                                                                            "arrays":[""]
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::GaussianBlur",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::GaussianBlur",
                                                        "target_domain": "PL",
                                                        "display_name": "GaussianBlur",
                                                        "brief": "The ``GaussianBlur`` function applies Gaussian blur on the input image. Gaussian filtering is done by convolving each point in the input image with a Gaussian kernel. |  | |image61| Where |image62|,\\ |image63| are the mean values and |image64|, |image65| are the variances in x and y directions respectively. In the GaussianBlur function, values of |image66|, |image67| are considered as zeroes and the values of |image68|, |image69| are equal.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_gaussian_filter.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "FILTER_SIZE",
                                                                                            "type": "int",
                                                                                            "description": " Filter size. Filter size of 3 (XF_FILTER_3X3), 5 (XF_FILTER_5X5) and 7 (XF_FILTER_7X7) are supported. "
                                                                          },
                                                                          {
                                                                                            "name": "BORDER_TYPE",
                                                                                            "type": "int",
                                                                                            "description": " Border type supported is XF_BORDER_CONSTANT ",
                                                                                            "enum": ["XF_BORDER_CONSTANT"]
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input and Output pixel type. Only 8-bit, unsigned, 1 and 3 channels are supported (XF_8UC1 and XF_8UC3) ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]

                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image (must be a multiple of 8, for 8-pixel operation) "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible values are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8 pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]

                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "src",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "sigma",
                                                                                            "direction": "in",
                                                                                            "type": "float"
                                                                          }
                                                        ]
                                      }
                    },
                    {
                                    "api_name": "xf::cv::gtm",
                                      "target_domain": "PL",
                                    "spec": {
                                                    "schema": "vitis_libraries_api_list_schema-1.0",
                                                    "api_name": "xf::cv::gtm",
                                      "target_domain": "PL",
                                                    "display_name": "gtm",
                                                    "brief": "In order to display HDR images, tone reproduction operators are applied that reduce the dynamic range to that of display device. Global Tone Mapping uses same non-linear mapping function to all pixels throughout the image to reduce the dynamic range.This implementaion is based on the algorithm proposed by Min H. Kim and Jan Kautz.",
                                                    
                                                    "header_file_name": [
                                                                        "imgproc/xf_gtm.hpp"
                                                    ],
                                                    "search_paths": [
                                                                        "L1/include/"
                                                    ],
                                                    "instance": "function",
                                                    "parameters": [
                                                                        {
                                                                                        "name": "SRC_T",
                                                                                        "type": "int",
                                                                                        "description": "Input Pixel type. The current supported pixel value is XF_16UC3",
                                                                                        "enum": ["XF_16UC3"]

                                                                        },
                                                                        {
                                                                                        "name": "DST_T",
                                                                                        "type": "int",
                                                                                        "description": " Output Pixel type. The current supported pixel value is XF_8UC3 ",
                                                                                        "enum": ["XF_8UC3"]

                                                                        },
                                                                        {
                                                                                        "name": "SIN_CHANNEL_IN_TYPE",
                                                                                        "type": "int",
                                                                                        "description": "Single channel type. It’s pixel value is XF_16UC1",
                                                                                        "enum": ["XF_16UC1"]

                                                                        },
                                                                        {
                                                                                        "name": "SIN_CHANNEL_OUT_TYPE",
                                                                                        "type": "int",
                                                                                        "description": " Single channel type. It’s pixel value is XF_8UC1",
                                                                                        "enum": ["XF_8UC1"]

                                                                        },
                                                                        {
                                                                                        "name": "ROWS",
                                                                                        "type": "int",
                                                                                        "minimum": 16,
                                                                                        "maximum": 2160,
                                                                                        "description": " Maximum height of the image that hardware kernel must be built for"
                                                                        },
                                                                        {
                                                                                        "name": "COLS",
                                                                                        "type": "int",
                                                                                        "minimum": 16,
                                                                                        "maximum": 3840,
                                                                                        "description": " Maximum width of the image that hardware kernel must be built for"
                                                                        },
                                                                        {
                                                                                        "name": "NPC",
                                                                                        "type": "int",
                                                                                        "description": " Number of Pixels to be processed per cycle. NPPC1 and NPPC2 are supported.",
                                                                                        "enum": ["XF_NPPC1", "XF_NPPC2"]

                                                                        }
                                                    ],
                                                    "ports": [
                                                                        {
                                                                                        "name": "src",
                                                                                        "direction": "in",
                                                                                        "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                        },
                                                                        {
                                                                                        "name": "dst",
                                                                                        "direction": "out",
                                                                                        "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>  &"
                                                                        },
                                                                        {
                                                                                        "name": "mean1",
                                                                                        "direction": "in",
                                                                                        "type": "ap_ufixed<16, 4>"
                                                                        },
                                                                        {
                                                                                        "name": "mean2",
                                                                                        "direction": "in",
                                                                                        "type": "ap_ufixed<16, 4>"
                                                                        },
                                                                        {
                                                                                        "name": "L_max1",
                                                                                        "direction": "in",
                                                                                        "type": "ap_ufixed<16, 4>"
                                                                        },
                                                                        {
                                                                                        "name": "L_max2",
                                                                                        "direction": "in",
                                                                                        "type": "ap_ufixed<16, 4>"
                                                                        },
                                                                        {
                                                                                        "name": "L_min1",
                                                                                        "direction": "in",
                                                                                        "type": "ap_ufixed<16, 4>"
                                                                        },
                                                                        {
                                                                                        "name": "L_min2",
                                                                                        "direction": "in",
                                                                                        "type": "ap_ufixed<16, 4>"
                                                                        },
                                                                        {
                                                                                        "name": "c1",
                                                                                        "direction": "in",
                                                                                        "type": "float"
                                                                        },
                                                                        {
                                                                                        "name": "c2",
                                                                                        "direction": "in",
                                                                                        "type": "float"
                                                                        }
                                                    ]
                                    }
                    },
  {
  
                                      "api_name": "xf::cv::HOGDescriptor",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::HOGDescriptor",
                                                        "target_domain": "PL",
                                                        "display_name": "HOGDescriptor",
                                                        "brief": "The Histogram of Oriented Gradients (HOG) is a feature descriptor used in computer vision for the purpose of object detection. The feature descriptors produced from this approach is widely used in the pedestrian detection. The technique counts the occurrences of gradient orientation in localized portions of an image. HOG is computed over a dense grid of uniformly spaced cells and normalized over overlapping blocks, for improved accuracy. The concept behind HOG is that the object appearance and shape within an image can be described by the distribution of intensity gradients or edge direction. Both RGB and gray inputs are accepted to the function. In the RGB mode, gradients are computed for each plane separately, but the one with the higher magnitude is selected. With the configurations provided, the window dimensions are 64x128, block dimensions are 16x16.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_hog_descriptor.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "WIN_HEIGHT",
                                                                                            "type": "int",
                                                                                            "description": " The number of pixel rows in the window. This must be    a multiple of 8 and should not exceed the number of    image rows. "
                                                                          },
                                                                          {
                                                                                            "name": "WIN_WIDTH",
                                                                                            "type": "int",
                                                                                            "description": " The number of pixel cols in the window. This must be    a multiple of 8 and should not exceed the number of    image columns. "
                                                                          },
                                                                          {
                                                                                            "name": "WIN_STRIDE",
                                                                                            "type": "int",
                                                                                            "description": " The pixel stride between two adjacent windows. It is    fixed at 8. "
                                                                          },
                                                                          {
                                                                                            "name": "BLOCK_HEIGHT",
                                                                                            "type": "int",
                                                                                            "description": " Height of the block. It is fixed at 16. "
                                                                          },
                                                                          {
                                                                                            "name": "BLOCK_WIDTH",
                                                                                            "type": "int",
                                                                                            "description": " Width of the block. It is fixed at 16. "
                                                                          },
                                                                          {
                                                                                            "name": "CELL_HEIGHT",
                                                                                            "type": "int",
                                                                                            "description": " Number of rows in a cell. It is fixed at 8. "
                                                                          },
                                                                          {
                                                                                            "name": "CELL_WIDTH",
                                                                                            "type": "int",
                                                                                            "description": " Number of cols in a cell. It is fixed at 8. "
                                                                          },
                                                                          {
                                                                                            "name": "NOB",
                                                                                            "type": "int",
                                                                                            "description": " Number of histogram bins for a cell. It is fixed at 9 "
                                                                          },
                                                                          {
                                                                                            "name": "DESC_SIZE",
                                                                                            "type": "int",
                                                                                            "description": " The size of the output descriptor.                                 If we select 'OUTPUT_VARIANT' as XF_HOG_RB then                               DESC_SIZE = (((((ROWS - WIN_HEIGHT) / WIN_STRIDE) + 1) * (((COLS - WIN_WIDTH) / WIN_STRIDE) + 1) * ((NOB * (BLOCK_HEIGHT / CELL_HEIGHT) * (BLOCK_WIDTH / CELL_WIDTH)) *((WIN_HEIGHT / CELL_HEIGHT) - 1) * ((WIN_WIDTH / CELL_WIDTH) - 1))) >> 1)                                                                                 else if we select 'OUTPUT_VARIANT' as XF_HOG_NRB then                          DESC_SIZE = ((((ROWS / CELL_HEIGHT) - 1) * ((COLS / CELL_WIDTH) - 1) * (NOB * (BLOCK_HEIGHT / CELL_HEIGHT) * (BLOCK_WIDTH / CELL_WIDTH))) >> 1)"
                                                                          },
                                                                          {
                                                                                            "name": "IMG_COLOR",
                                                                                            "type": "int",
                                                                                            "description": " The type of the image, set as either XF_GRAY or    XF_RGB ",
                                                                                            "enum":["XF_GRAY", "XF_RGB"]
                                                                          },
                                                                          {
                                                                                            "name": "OUTPUT_VARIANT",
                                                                                            "type": "int",
                                                                                            "description": "Must be either XF_HOG_RB or XF_HOG_NRB",
                                                                                            "enum":["XF_HOG_RB", "XF_HOG_NRB"]
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. Must be either XF_8UC1 or XF_8UC4,    for gray and color respectively. ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]

                                                                          },
                                                                          {
                                                                                            "name": "DST_T",
                                                                                            "type": "int",
                                                                                            "description": " Output descriptor type. Must be XF_32UC1. ",
                                                                                            "enum": ["XF_32UC1"]

                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Number of rows in the image being processed. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Number of columns in the image being processed. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; this    function supports only XF_NPPC1 or 1 pixel per cycle    operations. ",
                                                                                            "enum": ["XF_NPPC1"]

                                                                          },
                                                                          {
                                                                                            "name": "USE_URAM",
                                                                                            "type": "bool",
                                                                                            "description": " Enable to map UltraRAM instead of BRAM for some    storage structures. "
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_in_mat",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> &"
                                                                          },
                                                                          {
                                                                                            "name": "_desc_mat",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_T, 1, DESC_SIZE, NPC> &"
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::HoughLines",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::HoughLines",
                                                        "target_domain": "PL",
                                                        "display_name": "HoughLines",
                                                        "brief": "The ``HoughLines`` function here is equivalent to HoughLines Standard in OpenCV. The ``HoughLines`` function is used to detect straight lines in a binary image. To apply the Hough transform, edge detection preprocessing is required. The input to the Hough transform is an edge detected binary image. For each point (xi,yi) in a binary image, we define a family of lines that go through the point as: .. code:: c    rho= xi cos(theta) + yi sin(theta) Each pair of (rho,theta) represents a line that passes through the point (xi,yi). These (rho,theta) pairs of this family of lines passing through the point form a sinusoidal curve in (rho,theta) plane. If the sinusoids of N different points intersect in the (rho,theta) plane, then that intersection (rho1, theta1) represents the line that passes through these N points. In the ``HoughLines`` function, an accumulator is used to keep the count (also called voting) of all the intersection points in the (rho,theta) plane. After voting, the function filters spurious lines by performing thinning, that is, checking if the center vote value is greater than the neighborhood votes and threshold, then making that center vote as valid and other wise making it zero. Finally, the function returns the desired maximum number of lines (LINESMAX) in (rho,theta) form as output. The design assumes the origin at the center of the image i.e at (Floor(COLS/2), Floor(ROWS/2)). The ranges of rho and theta are: .. code:: c     theta = [0, pi) .. code:: c    rho=[-DIAG/2, DIAG/2), where DIAG = cvRound{SquareRoot( (COLS*COLS) + (ROWS*ROWS))} For ease of use, the input angles THETA, MINTHETA and MAXTHETA are taken in degrees, while the output theta is in radians. The angle resolution THETA is declared as an integer, but treated as a value in Q6.1 format (that is, THETA=3 signifies that the resolution used in the function is 1.5 degrees). When the output (rho, ? theta) is used for drawing lines, you should be aware of the fact that origin is at the center of the image.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_houghlines.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "RHO",
                                                                                            "type": "unsigned",
                                                                                            "description": "Distance resolution of the accumulator in pixels. fixed to 1"
                                                                          },
                                                                          {
                                                                                            "name": "THETA",
                                                                                            "type": "int",
                                                                                            "description": " Angle resolution of the accumulator in degrees and Q6.1    format. fixed to 2 "
                                                                          },
                                                                          {
                                                                                            "name": "MAXLINES",
                                                                                            "type": "int",
                                                                                            "description": " Maximum number of lines to be detected.possible value is  512 "
                                                                          },
                                                                          {
                                                                                            "name": "DIAG",
                                                                                            "type": "int",
                                                                                            "description": " Diagonal of the image. It should be cvRound(sqrt(rows*rows + cols*cols)/RHO"
                                                                          },
                                                                          {
                                                                                            "name": "MINTHETA",
                                                                                            "type": "int",
                                                                                            "description": " Minimum angle in degrees to check lines. possible value is 0"
                                                                          },
                                                                          {
                                                                                            "name": "MAXTHETA",
                                                                                            "type": "int",
                                                                                            "description": " Maximum angle in degrees to check lines. possible value is 180"
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input Pixel Type. Only 8-bit, unsigned, 1-channel is    supported (XF_8UC1). ",
                                                                                            "enum": ["XF_8UC1"]

                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input image "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input image "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of Pixels to be processed per cycle; Only single    pixel supported XF_NPPC1. ",
                                                                                            "enum": ["XF_NPPC1"]

                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src_mat",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "outputrho",
                                                                                            "direction": "out",
                                                                                            "type": "float",
                                                                                            "arrays":["MAXLINES"]

                                                                          },
                                                                          {
                                                                                            "name": "outputtheta",
                                                                                            "direction": "out",
                                                                                            "type": "float",
                                                                                            "arrays":["MAXLINES"]

                                                                          },
                                                                          {
                                                                                            "name": "threshold",
                                                                                            "direction": "in",
                                                                                            "type": "short"
                                                                          },
                                                                          {
                                                                                            "name": "linesmax",
                                                                                            "direction": "in",
                                                                                            "type": "short"
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::inRange",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::inRange",
                                                        "target_domain": "PL",
                                                        "display_name": "inRange",
                                                        "brief": "The InRange function checks if pixels in the image src lie between the given boundaries. dst(x,y) is set to 255, if src(x,y) is within the specified thresholds and otherwise 0. Dst(I)= lowerb \u2264 src(I) \u2264 upperb Where (x,y) is the spatial coordinate of the pixel.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_inrange.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input Pixel Type. 8-bit, unsigned, 1 and 3 channels    are supported (XF_8UC1 and XF_8UC3). ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]

                                                                          },
                                                                          {
                                                                                            "name": "DST_T",
                                                                                            "type": "int",
                                                                                            "description": " Input Pixel Type. 8-bit, unsigned, 1 and 3 channels    are supported (XF_8UC1 and XF_8UC3). ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]

                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. In case of    N-pixel parallelism, width should be multiple of N. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible    options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8    pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "src",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "lower_thresh",
                                                                                            "direction": "in",
                                                                                            "type": "unsigned char",
                                                                                            "arrays":[""]

                                                                          },
                                                                          {
                                                                                            "name": "upper_thresh",
                                                                                            "direction": "in",
                                                                                            "type": "unsigned char",
                                                                                            "arrays":[""]

                                                                          },
                                                                          {
                                                                                            "name": "dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_T, ROWS, COLS, NPC> & "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::integral",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::integral",
                                                        "target_domain": "PL",
                                                        "display_name": "integral",
                                                        "brief": "| The ``integral`` function computes an integral image of the input.   Each output pixel is the sum of all pixels above and to the left of   itself. | |image91|",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_integral_image.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_TYPE",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. Only 8-bit, unsigned, 1 channel is    supported (XF_8UC1) ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "DST_TYPE",
                                                                                            "type": "int",
                                                                                            "description": " Output pixel type. Only 32-bit,unsigned,1 channel is    supported(XF_32UC1) ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; this    function supports only XF_NPPC1 or 1 pixel per cycle    operations. ",
                                                                                            "enum": ["XF_NPPC1"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src_mat",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_TYPE, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst_mat",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_TYPE, ROWS, COLS, NPC> & "
                                                                          }
                                                        ]
                                      }
                    },
                    {
                                    "api_name": "xf::cv::ispStats",
                                      "target_domain": "PL",
                                    "spec": {
                                                    "schema": "vitis_libraries_api_list_schema-1.0",
                                                    "api_name": "xf::cv::ispStats",
                                      "target_domain": "PL",
                                                    "display_name": "ispStats",
                                                    "brief": "The ``ispstats`` function returns histogram of the input BAYER, BGR or GRAY image.",
                                                    
                                                    "header_file_name": [
                                                                        "imgproc/xf_ispstats.hpp"
                                                    ],
                                                    "search_paths": [
                                                                        "L1/include/"
                                                    ],
                                                    "instance": "function",
                                                    "parameters": [
                                                                        {
                                                                                        "name": "MAX_ZONES",
                                                                                        "type": "int",
                                                                                        "description": "Maximum number of possible zones. Possible value is 64."
                                                                        },
                                                                        {
                                                                                        "name": "STATS_SIZE",
                                                                                        "type": "int",
                                                                                        "description": "Number of bins per channel for the input image. This is equal to the number of output bins if merge bins feature is disabled. Possible value is 256 and 4096."
                                                                        },
                                                                        {
                                                                                        "name": "FINAL_BINS_NUM",
                                                                                        "type": "int",
                                                                                        "description": "Number of output bins per channel if merge bins feature is enabled. Possible value is 4."
                                                                        },
                                                                        {
                                                                                        "name": "MERGE_BINS",
                                                                                        "type": "int",
                                                                                        "description": "To disable or enable merge bins feature. Possible values are 0 and 1."
                                                                        },
                                                                        {
                                                                                        "name": "SRC_T",
                                                                                        "type": "int",
                                                                                        "description": "Input pixel type. Possible values are XF_8UC3, XF_16UC3, XF_8UC1, XF_16UC1.",
                                                                                        "enum": ["XF_8UC3", "XF_16UC3", "XF_8UC1", "XF_16UC1"]
                                                                        },
                                                                        {
                                                                                        "name": "NUM_OUT_CH",
                                                                                        "type": "int",
                                                                                        "description": " Number of output channels. Possible Values are 1 and 3. "
                                                                        },
                                                                        {
                                                                                        "name": "ROWS",
                                                                                        "type": "int",
                                                                                        "minimum": 16,
                                                                                        "maximum": 2160,
                                                                                        "description": " Maximum height of the image that hardware kernel must be built for"
                                                                        },
                                                                        {
                                                                                        "name": "COLS",
                                                                                        "type": "int",
                                                                                        "minimum": 16,
                                                                                        "maximum": 3840,
                                                                                        "description": " Maximum width of the image that hardware kernel must be built for"
                                                                        },
                                                                        {
                                                                                        "name": "NPC",
                                                                                        "type": "int",
                                                                                        "description": " Number of pixels to be processed per cycle. Possible options are XF_NPPC1 only.",
                                                                                        "enum": ["XF_NPPC1"]
                                                                        }
                                                    ],
                                                    "ports": [
                                                                        {
                                                                                        "name": "_src",
                                                                                        "direction": "in",
                                                                                        "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                        },
                                                                        {
                                                                                        "name": "stats",
                                                                                        "direction": "out",
                                                                                        "type": "uint32_t*"
                                                                        },
                                                                        {
                                                                                        "name": "max_bins_list",
                                                                                        "direction": "in",
                                                                                        "type": "ap_uint<13>*"
                                                                        },
                                                                        {
                                                                                        "name": "roi_tlx",
                                                                                        "direction": "in",
                                                                                        "type": "uint16_t "
                                                                        },
                                                                        {
                                                                                        "name": "roi_tly",
                                                                                        "direction": "in",
                                                                                        "type": "uint16_t"
                                                                        },
                                                                        {
                                                                                        "name": "roi_brx",
                                                                                        "direction": "in",
                                                                                        "type": "uint16_t"
                                                                        },
                                                                        {
                                                                                        "name": "roi_bry",
                                                                                        "direction": "in",
                                                                                        "type": "uint16_t"
                                                                        },
                                                                        {
                                                                                        "name": "zone_col_num",
                                                                                        "direction": "in",
                                                                                        "type": "uint16_t"
                                                                        },
                                                                        {
                                                                                        "name": "zone_row_num",
                                                                                        "direction": "in",
                                                                                        "type": "uint16_t"
                                                                        },
                                                                        {
                                                                                        "name": "inputMin",
                                                                                        "direction": "in",
                                                                                        "type": "float"
                                                                        },
                                                                        {
                                                                                        "name": "inputMax",
                                                                                        "direction": "in",
                                                                                        "type": "float"
                                                                        },
                                                                        {
                                                                                        "name": "outputMin",
                                                                                        "direction": "in",
                                                                                        "type": "float"
                                                                        },
                                                                        {
                                                                                        "name": "outputMax",
                                                                                        "direction": "in",
                                                                                        "type": "float"
                                                                        }
                                                    ]
                                    }
                    },
  {
                                      "api_name": "xf::cv::Lscdistancebased",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::Lscdistancebased",
                                                        "target_domain": "PL",
                                                        "display_name": "Lscdistancebased",
                                                        "brief": "Vignetting/Lensshading refers to the fall-off pixel intensity from the centre towards the edges of the image. In this algorithm, vignette is corrected by considering the distance between the centre pixel and actual image pixel position. This distance is used to calculate intensity gain per pixel per channel which is used for the correction.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_lensshadingcorrection.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. 8/10/12/16-bit, unsigned, 3 channel is    supported (XF_8UC3, XF_10UC3, XF_12UC3, XF_16UC3). ",
                                                                                            "enum": ["XF_8UC3", "XF_10UC3", "XF_12UC3", "XF_16UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "DST_T",
                                                                                            "type": "int",
                                                                                            "description": " Output pixel type. 8/10/12/16-bit, unsigned, 3 channel is    supported (XF_8UC3, XF_10UC3, XF_12UC3, XF_16UC3). ",
                                                                                            "enum": ["XF_8UC3", "XF_10UC3", "XF_12UC3", "XF_16UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. In case of    N-pixel parallelism, width should be multiple of N. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible    options are XF_NPPC1, XF_NPPC2 AND so on ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "src",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_T, ROWS, COLS, NPC>& "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::LUT",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::LUT",
                                                        "target_domain": "PL",
                                                        "display_name": "LUT",
                                                        "brief": "The ``LUT`` function performs the table lookup operation. Transforms the source image into the destination image using the given look-up table. The input image must be of depth XF_8UP and the output image of same type as input image. I\\ :sub:`out`\\ (x, y) = LUT [I:sub:`in1`\\ (x, y)] Where: -  I\\ :sub:`out`\\ (x, y) is the intensity of output image at (x, y)    position -  I\\ :sub:`in`\\ (x, y) is the intensity of first input image at (x, y)    position -  LUT is the lookup table of size 256 and type unsigned char.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_lut.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input and Output pixel type. Only 8-bit, unsigned, 1 and    3 channels are supported (XF_8UC1 and XF_8UC3) ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Number of rows in the image being processed. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Number of columns in the image being processed. Must be    a multiple of 8, for 8-pixel operation. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed in parallel. Possible    options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8    pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_lut",
                                                                                            "direction": "in",
                                                                                            "type": "unsigned char* "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::lut3d",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::lut3d",
                                                        "target_domain": "PL",
                                                        "display_name": "lut3d",
                                                        "brief": "3D Look Up Tables (LUTs) may look similar to 1D LUTs in their principle of using value as mapping indexes to get the new value, they differ in the sense that they operate on three independent parameters. This drastically increases the number of mapped indexes to value pairs. For example, a combination of 3 individual 1D LUTs can map 2^n * 3 values where n is the bitdepth, whereas a 3D LUT processing 3 channels will have 2^n * 2^n * 2^n possible values. Since all those huge number of values cannot be stored, only a subset of them are saved and the remaining values are computed through interpolation. The current implementation supports trilinear interpolation.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_3dlut.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "LUTDIM",
                                                                                            "type": "int",
                                                                                            "description": " Maximum dimension of input LUT.Possible value is 33 "
                                                                          },
                                                                          {
                                                                                            "name": "SQLUTDIM",
                                                                                            "type": "int",
                                                                                            "description": " Squared value of maximum dimension of input LUT.Possible value is LUT_DIM * LUT_DIM"
                                                                          },
                                                                          {
                                                                                            "name": "INTYPE",
                                                                                            "type": "int",
                                                                                            "description": " Input Pixel Type. XF_8UC3, XF_10UC3, XF_12UC3, XF_16UC3 supported ",
                                                                                            "enum": ["XF_8UC3", "XF_16UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "OUTTYPE",
                                                                                            "type": "int",
                                                                                            "description": " Output Pixel Type. XF_8UC3, XF_10UC3, XF_12UC3, XF_16UC3 supported ",
                                                                                            "enum": ["XF_8UC3", "XF_16UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image "
                                                                          },
                                                                          {
                                                                                            "name": "NPPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of Pixels to be processed per cycle. Only XF_NPPC1 supported ",
                                                                                            "enum": ["XF_NPPC1"]
                                                                          },
                                                                          {
                                                                                            "name": "URAM",
                                                                                            "type": "int",
                                                                                            "description": " Enable to map storage structures to UltraRAM. "
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "in_img",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<INTYPE, ROWS, COLS, NPPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "lut",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<XF_32FC3, SQLUTDIM, LUTDIM, NPPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "out_img",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<OUTTYPE, ROWS, COLS, NPPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "lutdim",
                                                                                            "direction": "in",
                                                                                            "type": "unsigned char"
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::magnitude",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::magnitude",
                                                        "target_domain": "PL",
                                                        "display_name": "magnitude",
                                                        "brief": "The ``magnitude`` function computes the magnitude for the images. The input images are x-gradient and y-gradient images of type 16S. The output image is of same type as the input image. For L1NORM normalization, the magnitude computed image is the pixel-wise added image of absolute of x-gradient and y-gradient, as shown below:. |  | |image70| For L2NORM normalization, the magnitude computed image is as follows: |  | |image71|",
                                                        
                                                        "header_file_name": [
                                                                          "core/xf_magnitude.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "NORM_TYPE",
                                                                                            "type": "int",
                                                                                            "description": " Normalization type can be either L1 or L2 norm. Values    are XF_L1NORM or XF_L2NORM ",
                                                                                            "enum": ["XF_L1NORM","XF_L2NORM"]
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. Only 16-bit, signed, 1 channel is    supported (XF_16SC1) ",
                                                                                            "enum": ["XF_16SC1"]
                                                                          },
                                                                          {
                                                                                            "name": "DST_T",
                                                                                            "type": "int",
                                                                                            "description": " Output pixel type. Only 16-bit, signed,1 channel is    supported (XF_16SC1) ",
                                                                                            "enum": ["XF_16SC1"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image (must be    multiple of 8, for 8-pixel operation) "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible    values are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8    pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src_matx",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_src_maty",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<DST_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst_mat",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_T, ROWS, COLS, NPC> & "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::max",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::max",
                                                        "target_domain": "PL",
                                                        "display_name": "maxS",
                                                        "brief": "The MaxS function calculates the maximum elements between src and given scalar value scl and stores the result in dst. dst(I)=maxS( src(I) ,scl )",
                                                        
                                                        "header_file_name": [
                                                                          "core/xf_arithm.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input Pixel Type. 8-bit, unsigned, 1 channel is    supported (XF_8UC1). ",
                                                                                            "enum": ["XF_8UC1"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. In case of    N-pixel parallelism, width should be multiple of N. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible    options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8    pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src1",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_scl",
                                                                                            "direction": "in",
                                                                                            "type": "unsigned char",
                                                                                            "arrays":[""]
                                                                          },
                                                                          {
                                                                                            "name": "_dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::MeanShift",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::MeanShift",
                                                        "target_domain": "PL",
                                                        "display_name": "MeanShift",
                                                        "brief": "Mean shift tracking is one of the basic object tracking algorithms. Mean-shift tracking tries to find the area of a video frame that is locally most similar to a previously initialized model. The object to be tracked is represented by a histogram. In object tracking algorithms target representation is mainly rectangular or elliptical region. It contains target model and target candidate. Color histogram is used to characterize the object. Target model is generally represented by its probability density function (pdf). Weighted RGB histogram is used to give more importance to object pixels. Mean-shift algorithm is an iterative technique for locating the maxima of a density function. For object tracking, the density function used is the weight image formed using color histograms of the object to be tracked and the frame to be tested. By using the weighted histogram we are taking spatial position into consideration unlike the normal histogram calculation. This function will take input image pointer, top left and bottom right coordinates of the rectangular object, frame number and tracking status as inputs and returns the centroid using recursive mean shift approach.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_mean_shift.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "MAXOBJ",
                                                                                            "type": "int",
                                                                                            "description": " Maximum number of objects to be tracked.Possible value is 10"
                                                                          },
                                                                          {
                                                                                            "name": "MAXITERS",
                                                                                            "type": "int",
                                                                                            "description": " Maximum iterations for convergence .Possible value is 4"
                                                                          },
                                                                          {
                                                                                            "name": "OBJ_ROWS",
                                                                                            "type": "int",
                                                                                            "description": " Maximum Height of the object to be tracked.Possible value is 250 "
                                                                          },
                                                                          {
                                                                                            "name": "OBJ_COLS",
                                                                                            "type": "int",
                                                                                            "description": " Maximum width of the object to be tracked.Possible value is 250 "
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Type of the input xf::cv::Mat, must be XF_8UC4, 8-bit    data with 4 channels ",
                                                                                            "enum": ["XF_8UC4"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum Height of the object to be tracked "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of the object to be tracked "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; this    function supports only XF_NPPC1 or 1 pixel per cycle    operations. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_in_mat",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> &"
                                                                          },
                                                                          {
                                                                                            "name": "x1",
                                                                                            "direction": "in",
                                                                                            "type": "uint16_t* "
                                                                          },
                                                                          {
                                                                                            "name": "y1",
                                                                                            "direction": "in",
                                                                                            "type": "uint16_t* "
                                                                          },
                                                                          {
                                                                                            "name": "obj_height",
                                                                                            "direction": "in",
                                                                                            "type": "uint16_t* "
                                                                          },
                                                                          {
                                                                                            "name": "obj_width",
                                                                                            "direction": "in",
                                                                                            "type": "uint16_t* "
                                                                          },
                                                                          {
                                                                                            "name": "dx",
                                                                                            "direction": "out",
                                                                                            "type": "uint16_t* "
                                                                          },
                                                                          {
                                                                                            "name": "dy",
                                                                                            "direction": "out",
                                                                                            "type": "uint16_t* "
                                                                          },
                                                                          {
                                                                                            "name": "status",
                                                                                            "direction": "in",
                                                                                            "type": "uint16_t* "
                                                                          },
                                                                          {
                                                                                            "name": "frame_status",
                                                                                            "direction": "in",
                                                                                            "type": "uint8_t"
                                                                          },
                                                                          {
                                                                                            "name": "no_objects",
                                                                                            "direction": "in",
                                                                                            "type": "uint8_t"
                                                                          },
                                                                          {
                                                                                            "name": "no_iters",
                                                                                            "direction": "in",
                                                                                            "type": "uint8_t"
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::meanStdDev",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::meanStdDev",
                                                        "target_domain": "PL",
                                                        "display_name": "meanStdDev",
                                                        "brief": "The ``meanStdDev`` function computes the mean and standard deviation of input image. The output Mean value is in fixed point Q8.8 format, and the Standard Deviation value is in Q8.8 format. Mean and standard deviation are calculated as follows: |  | |image137| | |image138|",
                                                        
                                                        "header_file_name": [
                                                                          "core/xf_mean_stddev.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input and Output pixel type. Only 8-bit, unsigned, 1    and 3 channels are supported (XF_8UC1 and XF_8UC3) ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Number of rows in the image being processed. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Number of columns in the image being processed. Must be    a multiple of 8, for 8-pixel operation. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible    options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8    pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_mean",
                                                                                            "direction": "out",
                                                                                            "type": "unsigned short* "
                                                                          },
                                                                          {
                                                                                            "name": "_stddev",
                                                                                            "direction": "out",
                                                                                            "type": "unsigned short* "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::medianBlur",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::medianBlur",
                                                        "target_domain": "PL",
                                                        "display_name": "medianBlur",
                                                        "brief": "The function medianBlur performs a median filter operation on the input image. The median filter acts as a non-linear digital filter which improves noise reduction. A filter size of N would output the median value of the NxN neighborhood pixel values, for each pixel.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_median_blur.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "FILTER_SIZE",
                                                                                            "type": "int",
                                                                                            "description": " Window size of the hardware filter for which the    hardware kernel will be built. This can be any odd    positive integer greater than 1. "
                                                                          },
                                                                          {
                                                                                            "name": "BORDER_TYPE",
                                                                                            "type": "int",
                                                                                            "description": " The way in which borders will be processed in the    hardware kernel. Currently, only XF_BORDER_REPLICATE    is supported. ",
                                                                                            "enum": ["XF_BORDER_REPLICATE"]
                                                                          },
                                                                          {
                                                                                            "name": "TYPE",
                                                                                            "type": "int",
                                                                                            "description": " The way in which borders will be processed in the    hardware kernel. Currently, only XF_BORDER_REPLICATE    is supported. ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Number of rows in the image being processed. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Number of columns in the image being processed. Must    be a multiple of 8, for 8-pixel operation. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed in parallel. Options    are XF_NPPC1 (for 1 pixel processing per clock),    XF_NPPC8 (for 8 pixel processing per clock ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<TYPE, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<TYPE, ROWS, COLS, NPC> & "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::merge",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::merge",
                                                        "target_domain": "PL",
                                                        "display_name": "merge",
                                                        "brief": "The ``merge`` function, merges single channel images into a multi-channel image. The number of channels to be merged should be two, three or four.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_channel_combine.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. Only 8-bit, unsigned, 1, channel    is supported (XF_8UC1) ",
                                                                                            "enum": ["XF_8UC1"]
                                                                          },
                                                                          {
                                                                                            "name": "DST_T",
                                                                                            "type": "int",
                                                                                            "description": " Output pixel type. 8-bit, unsigned,2,3 and 4 channels are    supported (XF_8UC2, XF_8UC3 and XF_8UC4) ",
                                                                                            "enum": ["XF_8UC2", "XF_8UC3","XF_8UC4"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. Must be multiple    of 8 for 8 pixel mode. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible    options are XF_NPPC1 for 1 pixel operation. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src1",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> &"
                                                                          },
                                                                          {
                                                                                            "name": "_src2",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> &"
                                                                          },
                                                                          {
                                                                                            "name": "_src3",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> &"
                                                                          },
                                                                          {
                                                                                            "name": "_src4",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> &"
                                                                          },
                                                                          {
                                                                                            "name": "_dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_T, ROWS, COLS, NPC> &"
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::min",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::min",
                                                        "target_domain": "PL",
                                                        "display_name": "min",
                                                        "brief": "The Min function calculates the per element minimum of two corresponding images src1, src2 and stores the result in dst. dst(I)=min( src1(I) ,src2(I) )",
                                                        
                                                        "header_file_name": [
                                                                          "core/xf_arithm.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. 8-bit, unsigned, 1 channel is    supported (XF_8UC1). ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. Must be    multiple of 8, for 8-pixel operation. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle, possible    options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8    pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src1",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_src2",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::minMaxLoc",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::minMaxLoc",
                                                        "target_domain": "PL",
                                                        "display_name": "minMaxLoc",
                                                        "brief": "The ``minMaxLoc`` function finds the minimum and maximum values in an image and location of those values. |  | |image139| | |image140|",
                                                        
                                                        "header_file_name": [
                                                                          "core/xf_min_max_loc.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. 8-bit, unsigned, 1 channel    (XF_8UC1), 16-bit, unsigned, 1 channel (XF_16UC1),    16-bit, signed, 1 channel (XF_16SC1), 32-bit, signed,    1 channel (XF_32SC1) are supported. ",
                                                                                            "enum": ["XF_8UC1", "XF_16UC1", "XF_16SC1", "XF_32SC1"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Number of rows in the image being processed. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Number of columns in the image being processed. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible    options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8    pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "max_value",
                                                                                            "direction": "out",
                                                                                            "type": "int32_t *"
                                                                          },
                                                                          {
                                                                                            "name": "min_value",
                                                                                            "direction": "out",
                                                                                            "type": "int32_t *"
                                                                          },
                                                                          {
                                                                                            "name": "_minlocx",
                                                                                            "direction": "out",
                                                                                            "type": "uint16_t *"
                                                                          },
                                                                          {
                                                                                            "name": "_minlocy",
                                                                                            "direction": "out",
                                                                                            "type": "uint16_t *"
                                                                          },
                                                                          {
                                                                                            "name": "_maxlocx",
                                                                                            "direction": "out",
                                                                                            "type": "uint16_t *"
                                                                          },
                                                                          {
                                                                                            "name": "_maxlocy",
                                                                                            "direction": "out",
                                                                                            "type": "uint16_t *"
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::min",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::min",
                                                        "target_domain": "PL",
                                                        "display_name": "minS",
                                                        "brief": "The MinS function calculates the minimum elements between src and given scalar value scl and stores the result in dst. dst(x,y)=minS( src(x,y) ,scl )",
                                                        
                                                        "header_file_name": [
                                                                          "core/xf_arithm.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input Pixel Type. 8-bit, unsigned, 1 channel is    supported (XF_8UC1). ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. In case of    N-pixel parallelism, width should be multiple of N "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible    options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8    pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src1",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_scl",
                                                                                            "direction": "in",
                                                                                            "type": "unsigned char",
                                                                                            "arrays":[""]
                                                                          },
                                                                          {
                                                                                            "name": "_dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          }
                                                        ]
                                      }
                    },
   {
                                      "api_name": "xf::cv::modefilter",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::modefilter",
                                                        "target_domain": "PL",
                                                        "display_name": "modefilter",
                                                        "brief": "Mode filter is a non-linear digital filter which improves noise reduction. This implements filter operation with given size of N by computing **mode** for all the pixels in an NxN window.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_modefilter.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "FILTER_SIZE",
                                                                                            "type": "int",
                                                                                            "description": " Window size of the hardware filter for which the    hardware kernel will be built. This can be any odd    positive integer greater than 1. "
                                                                          },
                                                                          {
                                                                                            "name": "BORDER_TYPE",
                                                                                            "type": "int",
                                                                                            "description": " The way in which borders will be processed in the    hardware kernel. Currently, only XF_BORDER_REPLICATE    is supported. ",
                                                                                            "enum": ["XF_BORDER_REPLICATE"]
                                                                          },
                                                                          {
                                                                                            "name": "TYPE",
                                                                                            "type": "int",
                                                                                            "description": " pixel type. Only 8-bit, unsigned, 1 and 3 channels are supported (XF_8UC1 and XF_8UC3) ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Number of rows in the image being processed. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Number of columns in the image being processed. Must    be a multiple of 8, for 8-pixel operation. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed in parallel. Options    are XF_NPPC1 (for 1 pixel processing per clock),    XF_NPPC8 (for 8 pixel processing per clock ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<TYPE, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "_dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<TYPE, ROWS, COLS, NPC>& "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::multiply",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::multiply",
                                                        "target_domain": "PL",
                                                        "display_name": "multiply",
                                                        "brief": "The ``multiply`` function performs the pixel-wise multiplication between two input images and returns the output image. I\\ :sub:`out`\\ (x, y) = I\\ :sub:`in1`\\ (x, y) \\* I\\ :sub:`in2`\\ (x, y) \\* scale_val Where: -  I\\ :sub:`out`\\ (x, y) is the intensity of the output image at (x, y)    position -  I\\ :sub:`in1`\\ (x, y) is the intensity of the first input image at    (x, y) position -  I\\ :sub:`in2`\\ (x, y) is the intensity of the second input image at    (x, y) position -  scale_val is the scale value. XF_CONVERT_POLICY_TRUNCATE: Results are the least significant bits of the output operand, as if stored in two\u2019s complement binary format in the size of its bit-depth. XF_CONVERT_POLICY_SATURATE: Results are saturated to the bit depth of the output operand.",
                                                        
                                                        "header_file_name": [
                                                                          "core/xf_arithm.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "POLICY_TYPE",
                                                                                            "type": "int",
                                                                                            "description": "Conversion Policy for fixed point arithmetic",
                                                                                            "enum": ["XF_CONVERT_POLICY_SATURATE"]
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " pixel type. Options are XF_8UC1,XF_8UC3,XF_16SC1 and    XF_16SC3. ",
                                                                                            "enum": ["XF_8UC3", "XF_16SC3", "XF_8UC1", "XF_16SC1"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image (must be a    multiple of 8, for 8-pixel operation) "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible    options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8    pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "src1",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "src2",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "scale",
                                                                                            "direction": "in",
                                                                                            "type": "float"
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::OtsuThreshold",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::OtsuThreshold",
                                                        "target_domain": "PL",
                                                        "display_name": "OtsuThreshold",
                                                        "brief": "Otsu threshold is used to automatically perform clustering-based image thresholding or the reduction of a gray-level image to a binary image. The algorithm assumes that the image contains two classes of pixels following bi-modal histogram (foreground pixels and background pixels), it then calculates the optimum threshold separating the two classes. Otsu method is used to find the threshold which can minimize the intra class variance which separates two classes defined by weighted sum of variances of two classes. |image141| Where, w_1is the class probability computed from the histogram. |image142| Otsu shows that minimizing the intra-class variance is the same as maximizing inter-class variance |image143| |image144| Where,\\ |image145| is the class mean.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_otsuthreshold.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. Only 8-bit, unsigned, 1 channel is    supported (XF_8UC1) ",
                                                                                            "enum": ["XF_8UC1"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image (must be a    multiple of 8, for 8-pixel operation) "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible    options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8 pixel    operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src_mat",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_thresh",
                                                                                            "direction": "out",
                                                                                            "type": "uint8_t &"
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::paintmask",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::paintmask",
                                                        "target_domain": "PL",
                                                        "display_name": "paintmask",
                                                        "brief": "The Paintmask function replace the pixel intensity value with given color value when mask is not zero or the corresponding pixel from the input image.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_paintmask.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. 8-bit, unsigned, 1 channel is    supported (XF_8UC1). ",
                                                                                            "enum": ["XF_8UC1"]
                                                                          },
                                                                          {
                                                                                            "name": "MASK_T",
                                                                                            "type": "int",
                                                                                            "description": " Mask value type. 8-bit, unsigned, 1 channel is    supported (XF_8UC1). ",
                                                                                            "enum": ["XF_8UC1"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. In case of    N-pixel parallelism, width should be multiple of N. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible    options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8    pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src_mat",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "in_mask",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<MASK_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst_mat",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_color",
                                                                                            "direction": "in",
                                                                                            "type": "unsigned char",
                                                                                            "arrays":[""]
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::phase",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::phase",
                                                        "target_domain": "PL",
                                                        "display_name": "phase",
                                                        "brief": "The ``phase`` function computes the polar angles of two images. The input images are x-gradient and y-gradient images of type 16S. The output image is of same type as the input image. For radians: |image72| For degrees: |image73|",
                                                        
                                                        "header_file_name": [
                                                                          "core/xf_phase.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "RET_TYPE",
                                                                                            "type": "int",
                                                                                            "description": " Output format can be either in radians or degrees.    Options are XF_RADIANS or XF_DEGREES.       - If the XF_RADIANS option is selected, phase API    will return result in Q4.12 format. The output    range is (0, 2 pi).    - If the XF_DEGREES option is selected, xFphaseAPI    will return result in Q10.6 degrees and output    range is (0, 360). ",
                                                                                            "enum":["XF_RADIANS","XF_DEGREES"]
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. Only 16-bit, signed, 1 channel is    supported (XF_16SC1). ",
                                                                                            "enum": ["XF_16SC1"]
                                                                          },
                                                                          {
                                                                                            "name": "DST_T",
                                                                                            "type": "int",
                                                                                            "description": " Output pixel type. Only 16-bit, signed, 1 channel is    supported (XF_16SC1) ",
                                                                                            "enum": ["XF_16SC1"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image (must be a    multiple of 8, for 8-pixel operation) "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible    options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8    pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src_matx",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_src_maty",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<DST_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst_mat",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_T, ROWS, COLS, NPC> & "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::pyrDown",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::pyrDown",
                                                        "target_domain": "PL",
                                                        "display_name": "pyrDown",
                                                        "brief": "| The ``pyrDown`` function is an image down-sampling algorithm which   smoothens the image before down-scaling it. The image is smoothened   using a Gaussian filter with the following kernel: | |image89| Down-scaling is performed by dropping pixels in the even rows and the even columns. The resulting image size is |image90|.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_pyr_down.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "TYPE",
                                                                                            "type": "int",
                                                                                            "description": " Input and Output pixel type. Only 8-bit, unsigned, 1    and 3 channels are supported (XF_8UC1 and XF_8UC3) ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum Height or number of input rows to build the    hardware for this kernel "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum Width or number of input columns to build the    hardware for this kernel "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to process per cycle. Currently, the    kernel supports only 1 pixel per cycle processing    (XF_NPPC1). ",
                                                                                            "enum": ["XF_NPPC1"]
                                                                          },
                                                                          {
                                                                                            "name": "USE_URAM",
                                                                                            "type": "bool",
                                                                                            "description": " Enable to map storage structures to UltraRAM "
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<TYPE, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<TYPE, (ROWS / 2), (COLS / 2), NPC> & "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::pyrUp",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::pyrUp",
                                                        "target_domain": "PL",
                                                        "display_name": "pyrUp",
                                                        "brief": "| The ``pyrUp`` function is an image up-sampling algorithm. It first   inserts zero rows and zero columns after every input row and column   making up to the size of the output image. The output image size is   always |image87|. The zero padded image is then smoothened using   Gaussian image filter. Gaussian filter for the pyramid-up function   uses a fixed filter kernel as given below: | |image88| However, to make up for the pixel intensity that is reduced due to zero padding, each output pixel is multiplied by 4.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_pyr_up.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "TYPE",
                                                                                            "type": "int",
                                                                                            "description": " Input and Output pixel type. Only 8-bit, unsigned, 1    and 3 channels are supported (XF_8UC1 and XF_8UC3) ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum Height or number of output rows to build the    hardware for this kernel "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum Width or number of output columns to build    the hardware for this kernel "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to process per cycle. Currently, the    kernel supports only 1 pixel per cycle processing    (XF_NPPC1). ",
                                                                                            "enum": ["XF_NPPC1"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<TYPE, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<TYPE, 2 * ROWS, 2 * COLS, NPC> & "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::reduce",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::reduce",
                                                        "target_domain": "PL",
                                                        "display_name": "reduce",
                                                        "brief": "The Reduce function reduces the matrix to a vector by treating rows/cols as set of 1-D vectors and performing specified operation on vectors until a single row/col is obtained. Reduction operation could be one of the following: -  REDUCE_SUM : The output is the sum of all of the matrix\u2019s    rows/columns. -  REDUCE_AVG : The output is the mean vector of all of the matrix\u2019s    rows/columns. -  REDUCE_MAX : The output is the maximum (column/row-wise) of all of    the matrix\u2019s rows/columns. -  REDUCE_MIN : The output is the minimum (column/row-wise) of all of    the matrix\u2019s rows/columns.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_reduce.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "REDUCE_OP",
                                                                                            "type": "int",
                                                                                            "description": " The flag specifies the type of reduction operation    to be applied. ",
                                                                                            "enum":["XF_REDUCE_SUM", "XF_REDUCE_AVG", "XF_REDUCE_MAX", "XF_REDUCE_MIN"]
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. 8-bit, unsigned, 1 channel is    supported (XF_8UC1). ",
                                                                                            "enum": ["XF_8UC1"]
                                                                          },
                                                                          {
                                                                                            "name": "DST_T",
                                                                                            "type": "int",
                                                                                            "description": " Output pixel type. 8-bit, unsigned, 1 channel is    supported (XF_8UC1). ",
                                                                                            "enum": ["XF_32SC1", "XF_8UC1"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. In case of    N-pixel parallelism, width should be multiple of N. "
                                                                          },
                                                                          {
                                                                                            "name": "ONE_D_HEIGHT",
                                                                                            "type": "int",
                                                                                            "description": " Height of output 1-D vector or reduced matrix.Possible values are 128, 1 "
                                                                          },
                                                                          {
                                                                                            "name": "ONE_D_WIDTH",
                                                                                            "type": "int",
                                                                                            "description": " Width of output 1-D vector or reduced matrix.Possible values are 1, 128"
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible    option is XF_NPPC1 (1 pixel per cycle). ",
                                                                                            "enum": ["XF_NPPC1"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src_mat",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst_mat",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_T, ONE_D_HEIGHT, ONE_D_WIDTH, 1> & "
                                                                          },
                                                                          {
                                                                                            "name": "dim",
                                                                                            "direction": "in",
                                                                                            "type": "unsigned char"
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::remap",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::remap",
                                                        "target_domain": "PL",
                                                        "display_name": "remap",
                                                        "brief": "| The ``remap`` function takes pixels from one place in the image and   relocates them to another position in another image. Two types of   interpolation methods are used here for mapping the image from source   to destination image. dst(x,y) = src(mapx(x,y), mapy(x,y))",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_remap.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "WIN_ROWS",
                                                                                            "type": "int",
                                                                                            "description": " Number of input image rows to be buffered inside.    Must be set based on the map data. For instance, for    left right flip, 2 rows are sufficient. possible value is 8 "
                                                                          },
                                                                          {
                                                                                            "name": "INTERPOLATION_TYPE",
                                                                                            "type": "int",
                                                                                            "description": "Types of Interpolaton techniques used in resize, affine and perspective",
                                                                                            "enum":["XF_INTERPOLATION_NN","XF_INTERPOLATION_BILINEAR","XF_INTERPOLATION_AREA"]
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input and Output pixel type. Only 8-bit, unsigned, 1    and 3 channels are supported (XF_8UC1 and XF_8UC3) ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "MAP_T",
                                                                                            "type": "int",
                                                                                            "description": " Map type. Single channel float type. XF_32FC1. ",
                                                                                            "enum": ["XF_32FC1"]
                                                                          },
                                                                          {
                                                                                            "name": "DST_T",
                                                                                            "type": "int",
                                                                                            "description": " Output image type. Grayscale image of type 8-bits and    single channel. XF_8UC1. ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Height of input and output images "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Width of input and output images "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; this    function supports only XF_NPPC1 or 1 pixel per cycle    operations. ",
                                                                                            "enum": ["XF_NPPC1"]

                                                                          },
                                                                          {
                                                                                            "name": "USE_URAM",
                                                                                            "type": "bool",
                                                                                            "description": " Enable to map some structures to UltraRAM instead of    BRAM. "
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src_mat",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> &"
                                                                          },
                                                                          {
                                                                                            "name": "_remapped_mat",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_T, ROWS, COLS, NPC> &"
                                                                          },
                                                                          {
                                                                                            "name": "_mapx_mat",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<MAP_T, ROWS, COLS, NPC> &"
                                                                          },
                                                                          {
                                                                                            "name": "_mapy_mat",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<MAP_T, ROWS, COLS, NPC> &"
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::resize",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::resize",
                                                        "target_domain": "PL",
                                                        "display_name": "resize",
                                                        "brief": "Resolution Conversion is the method used to resize the source image to the size of the destination image. Different types of interpolation techniques can be used in resize function, namely: Nearest-neighbor, Bilinear, and Area interpolation. The type of interpolation can be passed as a template parameter to the API. The following enumeration types can be used to specify the interpolation type: -  XF_INTERPOLATION_NN - For Nearest-neighbor interpolation -  XF_INTERPOLATION_BILINEAR - For Bilinear interpolation -  XF_INTERPOLATION_AREA - For Area interpolation Note: Scaling factors greater than or equal to 0.25 are supported in down-scaling and values less than or equal to 8 are supported for up-scaling.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_resize.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "INTERPOLATION_TYPE",
                                                                                            "type": "int",
                                                                                            "description": " - XF_INTERPOLATION_NN \u2013 Nearest Neighbor    Interpolation    - XF_INTERPOLATION_BILINEAR \u2013 Bilinear interpolation    - XF_INTERPOLATION_AREA \u2013 Area Interpolation",
                                                                                            "enum":["XF_INTERPOLATION_NN","XF_INTERPOLATION_BILINEAR","XF_INTERPOLATION_AREA"]
                                                                          },
                                                                          {
                                                                                            "name": "TYPE",
                                                                                            "type": "int",
                                                                                            "description": " Input and Output pixel type. Only 8-bit, unsigned, 1 and 3 channels are supported (XF_8UC1 and XF_8UC3)",
                                                                                            "enum": ["XF_8UC3", "XF_16UC3", "XF_8UC1", "XF_16UC1"]
                                                                          },
                                                                          {
                                                                                            "name": "SRC_ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum Height of input image for which the hardware    kernel would be built. "
                                                                          },
                                                                          {
                                                                                            "name": "SRC_COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum Width of input image for which the hardware    kernel would be built (must be a multiple of 8). "
                                                                          },
                                                                          {
                                                                                            "name": "DST_ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 1080,
                                                                                            "description": " Maximum Height of output image for which the hardware    kernel would be built. "
                                                                          },
                                                                          {
                                                                                            "name": "DST_COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 1920,
                                                                                            "description": " Maximum Width of output image for which the hardware    kernel would be built (must be a multiple of 8). "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle. Possible    options are XF_NPPC1 (1 pixel per cycle) and XF_NPPC8    (8 pixel per cycle). ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          },
                                                                          {
                                                                                            "name": "USE_URAM",
                                                                                            "type": "bool",
                                                                                            "description": " Enable to map storage structures to UltraRAM "
                                                                          },
                                                                          {
                                                                                            "name": "MAX_DOWN_SCALE",
                                                                                            "type": "int",
                                                                                            "description": "For Nearest Neighbor & Bilinear Interpolation, max down scale factor 2 for all 1-pixel modes, and for upscale in x direction"
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<TYPE, SRC_ROWS, SRC_COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<TYPE, DST_ROWS, DST_COLS, NPC> & "
                                                                          }
                                                        ]
                                      }
                    },
                    {
                                    "api_name": "xf::cv::rotate",
                                      "target_domain": "PL",
                                    "spec": {
                                                    "schema": "vitis_libraries_api_list_schema-1.0",
                                                    "api_name": "xf::cv::rotate",
                                      "target_domain": "PL",
                                                    "display_name": "rotate",
                                                    "brief": "Rotate function rotates the input image by 90, 180 or 270 degrees in clockwise direction.",
                                                    
                                                    "header_file_name": [
                                                                        "imgproc/xf_rotate.hpp"
                                                    ],
                                                    "search_paths": [
                                                                        "L1/include/"
                                                    ],
                                                    "instance": "function",
                                                    "parameters": [
                                                                        {
                                                                                        "name": "INPUT_PTR_WIDTH",
                                                                                        "type": "int",
                                                                                        "description": "Pixel width of input image pointer. Must be power of 2."
                                                                        },
                                                                        {
                                                                                        "name": "OUTPUT_PTR_WIDTH",
                                                                                        "type": "int",
                                                                                        "description": "Pixel width of output image pointer. Must be power of 2."
                                                                        },
                                                                        {
                                                                                        "name": "TYPE",
                                                                                        "type": "int",
                                                                                        "description": "Input and Output Pixel type. Only 8-bit, unsigned and 1,3 channels are supported(XF_8UC1, XF_8UC3)",
                                                                                        "enum": ["XF_8UC1", "XF_8UC3"]
                                                                        },
                                                                        {
                                                                                        "name": "TILE_SZ",
                                                                                        "type": "int",
                                                                                        "description": "Tile size.Possible value is 32"
                                                                        },
                                                                        {
                                                                                        "name": "ROWS",
                                                                                        "type": "int",
                                                                                        "minimum": 16,
                                                                                        "maximum": 2160,
                                                                                        "description": " Maximum height of the image (Must be multiple of NPC)"
                                                                        },
                                                                        {
                                                                                        "name": "COLS",
                                                                                        "type": "int",
                                                                                        "minimum": 16,
                                                                                        "maximum": 3840,
                                                                                        "description": " Maximum width of the image (Must be multiple of NPC)"
                                                                        },
                                                                        {
                                                                                        "name": "NPC",
                                                                                        "type": "int",
                                                                                        "description": "Number of Pixels to be processed per cycle. NPPC1 and NPPC2 are supported.",
                                                                                        "enum": ["XF_NPPC1", "XF_NPPC2"]
                                                                        }
                                                    ],
                                                    "ports": [
                                                                        {
                                                                                        "name": "src_ptr",
                                                                                        "direction": "in",
                                                                                        "type": "ap_uint<INPUT_PTR_WIDTH>*"
                                                                        },
                                                                        {
                                                                                        "name": "dst_ptr",
                                                                                        "direction": "out",
                                                                                        "type": "ap_uint<OUTPUT_PTR_WIDTH>*"
                                                                        },
                                                                        {
                                                                                        "name": "rows",
                                                                                        "direction": "in",
                                                                                        "type": "int"
                                                                        },
                                                                        {
                                                                                        "name": "cols",
                                                                                        "direction": "in",
                                                                                        "type": "int"
                                                                        },
                                                                        {
                                                                                        "name": "direction",
                                                                                        "direction": "in",
                                                                                        "type": "int"
                                                                        }
                                                    ]
                                    }
                    },
  {
                                      "api_name": "xf::cv::rgba2yuv4",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::rgba2yuv4",
                                                        "target_domain": "PL",
                                                        "display_name": "rgba2yuv4",
                                                        "brief": "The color conversion functions convert one image format to another image format, for the combinations listed in the following table. The rows represent the input formats and the columns represent the output formats. Supported conversions are discussed in the following sections. .. table:: Table 76. Supported Color Conversions          +-------------+---------------------------------------+------------------------------------------------+------------------------------------------------+---------------------------------------+---------------------------------------------+---------------------------------------------+---------------------------------------+---------------------------------------------+---------------------------------------------+     | I/O Formats | RGBA                                  | NV12                                           | NV21                                           | IYUV                                  | UYVY                                        | YUYV                                        | YUV4                                  | RGB                                         | BGR                                         |     +=============+=======================================+================================================+================================================+=======================================+=============================================+=============================================+=======================================+=============================================+=============================================+     | RGBA        | N/A                                   | For details, see the RGBA to NV12              | For details, see the RGBA to NV21              | For details, see the RGBA/RGB to IYUV |                                             |                                             | For details, see the RGBA/RGB to YUV4 |                                             |                                             |     +-------------+---------------------------------------+------------------------------------------------+------------------------------------------------+---------------------------------------+---------------------------------------------+---------------------------------------------+---------------------------------------+---------------------------------------------+---------------------------------------------+     | NV12        | For details, see the NV12 to RGBA     | N/A                                            | For details, see the NV12 to NV21/NV21 to NV12 | For details, see the NV12 to IYUV     | For details, see the NV12/NV21 to UYVY/YUYV | For details, see the NV12/NV21 to UYVY/YUYV | For details, see the NV12 to YUV4     | For details, see the NV12/NV21 to RGB/ BGR  | For details, see the NV12/NV21 to RGB/ BGR  |     +-------------+---------------------------------------+------------------------------------------------+------------------------------------------------+---------------------------------------+---------------------------------------------+---------------------------------------------+---------------------------------------+---------------------------------------------+---------------------------------------------+     | NV21        | For details, see the NV21 to RGBA     | For details, see the NV12 to NV21/NV21 to NV12 | N/A                                            | For details, see the NV21 to IYUV     | For details, see the NV12/NV21 to UYVY/YUYV | For details, see the NV12/NV21 to UYVY/YUYV | For details, see the NV21 to YUV4     | For details, see the NV12/NV21 to RGB/ BGR  | For details, see the NV12/NV21 to RGB/ BGR  |     +-------------+---------------------------------------+------------------------------------------------+------------------------------------------------+---------------------------------------+---------------------------------------------+---------------------------------------------+---------------------------------------+---------------------------------------------+---------------------------------------------+     | IYUV        | For details, see the IYUV to RGBA/RGB | For details, see the IYUV to NV12              |                                                | N/A                                   |                                             |                                             | For details, see the IYUV to YUV4     | For details, see the IYUV to RGBA/RGB       |                                             |     +-------------+---------------------------------------+------------------------------------------------+------------------------------------------------+---------------------------------------+---------------------------------------------+---------------------------------------------+---------------------------------------+---------------------------------------------+---------------------------------------------+     | UYVY        | For details, see the UYVY to RGBA     | For details, see the UYVY to NV12              |                                                | For details, see the UYVY to IYUV     | N/A                                         |                                             |                                       |                                             |                                             |     +-------------+---------------------------------------+------------------------------------------------+------------------------------------------------+---------------------------------------+---------------------------------------------+---------------------------------------------+---------------------------------------+---------------------------------------------+---------------------------------------------+     | YUYV        | For details, see the YUYV to RGBA     | For details, see the YUYV to NV12              |                                                | For details, see the YUYV to IYUV     |                                             | N/A                                         |                                       |                                             |                                             |     +-------------+---------------------------------------+------------------------------------------------+------------------------------------------------+---------------------------------------+---------------------------------------------+---------------------------------------------+---------------------------------------+---------------------------------------------+---------------------------------------------+     | YUV4        |                                       |                                                |                                                |                                       |                                             |                                             | N/A                                   |                                             |                                             |     +-------------+---------------------------------------+------------------------------------------------+------------------------------------------------+---------------------------------------+---------------------------------------------+---------------------------------------------+---------------------------------------+---------------------------------------------+---------------------------------------------+     | RGB         |                                       | For details see the RGB/ BGR to NV12/NV21      | For details see theRGB/ BGR to NV12/NV21       | For details see the RGBA/RGB to IYUV  | For details see the RGB/BGR to UYVY/YUYV    | For details see the RGB/BGR to UYVY/YUYV    | For details see the RGBA/RGB to YUV4  |                                             | For details see the BGR to RGB / RGB to BGR |     +-------------+---------------------------------------+------------------------------------------------+------------------------------------------------+---------------------------------------+---------------------------------------------+---------------------------------------------+---------------------------------------+---------------------------------------------+---------------------------------------------+     | BGR         |                                       | For details see the RGB/ BGR to NV12/NV21      | For details see theRGB/ BGR to NV12/NV21       |                                       | For details see the RGB/BGR to UYVY/YUYV    | For details see the RGB/BGR to UYVY/YUYV    |                                       | For details see the BGR to RGB / RGB to BGR |                                             |     +-------------+---------------------------------------+------------------------------------------------+------------------------------------------------+---------------------------------------+---------------------------------------------+---------------------------------------------+---------------------------------------+---------------------------------------------+---------------------------------------------+ .. rubric:: Other conversions Few other conversions are also added. BGR/RGB<->HSV,BGR/RGB<->HLS,BGR/RGB<->YCrCb,BGR/RGB<->XYZ and RGB<->BGR conversions are added. .. _rgb-to-yuv: RGB to YUV Conversion Matrix ----------------------------- | Following is the formula to convert RGB data to YUV data: | |image31| .. _yuv-to-rgb: YUV to RGB Conversion Matrix ----------------------------- | Following is the formula to convert YUV data to RGB data: | |image32| Source: http://www.fourcc.org/fccyvrgb.php .. _rgba-yuv4: RGBA/RGB to YUV4 ---------------- The ``rgba2yuv4`` function converts a 4-channel RGBA image to YUV444 format and the ``rgb2yuv4`` function converts a 3-channel RGB image to YUV444 format. The function outputs Y, U, and V streams separately.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_cvt_color.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. Only 8-bit, unsigned, 4(RGBA) and    3(RGB)-channel are supported (XF_8UC4 and XF_8UC3). ",
                                                                                            "enum": ["XF_8UC4", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "DST_T",
                                                                                            "type": "int",
                                                                                            "description": " Output pixel type. Only 8-bit, unsigned, 1-channel is    supported (XF_8UC1). ",
                                                                                            "enum": ["XF_8UC1"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. Must be a    multiple of 8 for 8 pixel mode. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible    options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8    pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_y_image",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_u_image",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_v_image",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_T, ROWS, COLS, NPC> & "
                                                                          }
                                                        ]
                                      }
                    },
                    {
                                    "api_name": "xf::cv::degamma",
                                      "target_domain": "PL",
                                    "spec": {
                                                    "schema": "vitis_libraries_api_list_schema-1.0",
                                                    "api_name": "xf::cv::degamma",
                                      "target_domain": "PL",
                                                    "display_name": "degamma",
                                                    "brief": "Degamma also known as linearization is typically designed to linearize the input from sensor (or any pre-processing IP) in order to facilitate ISP processing that operates on linear domain, such as noise reduction. While non-linearization comes in several forms, this module is served to linearize only simple curves.                                                                         This implementaion supports Bayer Raw data of 8, 10, 12, 16 bits per pixel with maximum 64 knee points PWL mapping.",
                                                    
                                                    "header_file_name": [
                                                                        "imgproc/xf_degamma.hpp"
                                                    ],
                                                    "search_paths": [
                                                                        "L1/include/"
                                                    ],
                                                    "instance": "function",
                                                    "parameters": [
                                                                        {
                                                                                        "name": "SRC_T",
                                                                                        "type": "int",
                                                                                        "description": " Input Pixel type. The current supported pixel value is XF_8UC1 and XF_16UC1 ",
                                                                                        "enum": ["XF_8UC1", "XF_16UC1"]
                                                                        },
                                                                        {
                                                                                        "name": "DST_T",
                                                                                        "type": "int",
                                                                                        "description": " output Pixel type. The current supported pixel value is XF_8UC1 and XF_16UC1 ",
                                                                                        "enum": ["XF_8UC1", "XF_16UC1"]
                                                                        },
                                                                        {
                                                                                        "name": "ROWS",
                                                                                        "type": "int",
                                                                                        "minimum": 16,
                                                                                        "maximum": 2160,
                                                                                        "description": " Maximum height of the image that hardware kernel must be built for"
                                                                        },
                                                                        {
                                                                                        "name": "COLS",
                                                                                        "type": "int",
                                                                                        "minimum": 16,
                                                                                        "maximum": 3840,
                                                                                        "description": " Maximum width of the image that hardware kernel must be built for"
                                                                        },
                                                                        {
                                                                                        "name": "NPC",
                                                                                        "type": "int",
                                                                                        "description": " Number of Pixels to be processed per cycle. NPPC1 and NPPC2 are supported.",
                                                                                        "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                        },
                                                                        {
                                                                                          "name": "N",
                                                                                          "type": "int",
                                                                                          "description": " Configurable number of knee points",
                                                                                          "enum": ["8"]
                                                                        }
                                                    ],
                                                    "ports": [
                                                                        {
                                                                                        "name": "src",
                                                                                        "direction": "in",
                                                                                        "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                        },
                                                                        {
                                                                                        "name": "dst",
                                                                                        "direction": "out",
                                                                                        "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>  &"
                                                                        },
                                                                        {
                                                                                        "name": "params",
                                                                                        "direction": "in",
                                                                                        "type": "ap_ufixed<32, 18>",
                                                                                        "arrays":["3","N","3"]
                                                                        },
                                                                        {
                                                                                        "name": "bayerp",
                                                                                        "direction": "in",
                                                                                        "type": "unsigned short"
                                                                        }
                                                    ]
                                    }
                    },
  {
                                      "api_name": "xf::cv::Scharr",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::Scharr",
                                                        "target_domain": "PL",
                                                        "display_name": "Scharr",
                                                        "brief": "The ``Scharr`` function computes the gradients of input image in both x and y direction by convolving the kernel with input image being processed. For Kernel size 3x3: -  GradientX:    |image147| -  GradientY:    |image148|",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_scharr.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "BORDER_TYPE",
                                                                                            "type": "int",
                                                                                            "description": " Border type supported is XF_BORDER_CONSTANT ",
                                                                                            "enum": ["XF_BORDER_CONSTANT"]
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. Only 8-bit, unsigned, 1 and 3    channels are supported (XF_8UC1 and XF_8UC3) ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "DST_T",
                                                                                            "type": "int",
                                                                                            "description": " Output pixel type. Only 8-bit unsigned, 16-bit    signed,1 and 3 channels are supported (XF_8UC1,    XF_16SC1,XF_8UC3 and XF_16SC3) ",
                                                                                            "enum": ["XF_8UC3", "XF_16SC3", "XF_8UC1", "XF_16SC1"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. Must be    multiple of 8, for 8-pixel operation. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible    options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8    pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src_mat",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst_matx",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst_maty",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_T, ROWS, COLS, NPC> & "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::SemiGlobalBM",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::SemiGlobalBM",
                                                        "target_domain": "PL",
                                                        "display_name": "SemiGlobalBM",
                                                        "brief": "Stereo matching algorithms are used for finding relative depth from a pair of rectified stereo images. The resultant disparity information can be used for 3D reconstruction by triangulation, using the known intrinsic and extrinsic parameters of the stereo camera. The Semi global method for stereo disparity estimation aggregates the cost in terms of dissimilarity across multiple paths leading to a smoother estimate of the disparity map. For the semi-global method in Vitis Vision, census transform in conjunction with Hamming distance is used for cost computation. The semiglobal optimization block is based on the implementation by Hirschmuller, but approximates the cost aggregation by considering only four directions. Parallelism is achieved by computing and aggregating cost for multiple disparities in parallel, and this parameter is included as a compile-time input.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_sgbm.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "BORDER_TYPE",
                                                                                            "type": "int",
                                                                                            "description": " The border pixels are processed in Census transform    function based on this parameter. Only    XF_BORDER_CONSTANT is supported. ",
                                                                                            "enum": ["XF_BORDER_CONSTANT"]
                                                                          },
                                                                          {
                                                                                            "name": "WINDOW_SIZE",
                                                                                            "type": "int",
                                                                                            "description": " Size of the window used for Census transform    computation. Only \u20185\u2019 (5x5) is supported. Possible value is 5 "
                                                                          },
                                                                          {
                                                                                            "name": "NDISP",
                                                                                            "type": "int",
                                                                                            "description": " Number of disparities.Possible value is 64 "
                                                                          },
                                                                          {
                                                                                            "name": "PU",
                                                                                            "type": "int",
                                                                                            "description": " Number of disparity units to be computed in parallel .Possible value is 32"
                                                                          },
                                                                          {
                                                                                            "name": "R",
                                                                                            "type": "int",
                                                                                            "description": " The border pixels are processed in Census transform    function based on this parameter. Only    XF_BORDER_CONSTANT is supported.Possible value is 4 "
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Type of input image Mat object. It must be XF_8UC1. ",
                                                                                            "enum": ["XF_8UC1"]
                                                                          },
                                                                          {
                                                                                            "name": "DST_T",
                                                                                            "type": "int",
                                                                                            "description": " Type of output disparity image Mat object. It must be    XF_8UC1. ",
                                                                                            "enum": ["XF_8UC1"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of the input image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of the input image. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be computed in parallel. It must    be XF_NPPC1. ",
                                                                                            "enum": ["XF_NPPC1"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src_mat_l",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T,ROWS,COLS,NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_src_mat_r",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T,ROWS,COLS,NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst_mat",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_T,ROWS,COLS,NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "p1",
                                                                                            "direction": "in",
                                                                                            "type": "uint8_t"
                                                                          },
                                                                          {
                                                                                            "name": "p2",
                                                                                            "direction": "in",
                                                                                            "type": "uint8_t"
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::set",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::set",
                                                        "target_domain": "PL",
                                                        "display_name": "set",
                                                        "brief": "The Set function sets the each pixel in input image to a given scalar value and stores the result in dst.",
                                                        
                                                        "header_file_name": [
                                                                          "core/xf_arithm.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. 8-bit, unsigned, 1 channel is    supported (XF_8UC1). ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. Must be    multiple of 8, for 8-pixel operation. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src1",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_scl",
                                                                                            "direction": "in",
                                                                                            "type": "unsigned char",
                                                                                            "arrays":[""]
                                                                          },
                                                                          {
                                                                                            "name": "_dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::Sobel",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::Sobel",
                                                        "target_domain": "PL",
                                                        "display_name": "Sobel",
                                                        "brief": "The ``Sobel`` function Computes the gradients of input image in both x and y direction by convolving the kernel with input image being processed. -  For Kernel size 3x3    -  GradientX:       |image149|    -  GradientY:       |image150| -  For Kernel size 5x5    -  GradientX:       |image151|    -  GradientY:       |image152| -  For Kernel size 7x7    -  GradientX:       |image153|    -  GradientY:       |image154|",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_sobel.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "BORDER_TYPE",
                                                                                            "type": "int",
                                                                                            "description": " Border Type supported is XF_BORDER_CONSTANT ",
                                                                                            "enum": ["XF_BORDER_CONSTANT"]
                                                                          },
                                                                          {
                                                                                            "name": "FILTER_TYPE",
                                                                                            "type": "int",
                                                                                            "description": " Filter size. Filter size of 3 (XF_FILTER_3X3), 5 (XF_FILTER_5X5) and 7 (XF_FILTER_7X7) are supported. "
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. Only 8-bit, unsigned, 1 and 3 channels are supported (XF_8UC1 and XF_8UC3) ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "DST_T",
                                                                                            "type": "int",
                                                                                            "description": " Output pixel type. Only 8-bit unsigned, 16-bit signed,1 and 3 channels are supported (XF_8UC1, XF_16SC1,XF_8UC3 and XF_16SC3) ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. Must be multiple of 8, for 8-pixel operation. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8 pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          },
                                                                          {
                                                                                            "name": "USE_URAM",
                                                                                            "type": "bool",
                                                                                            "description": " Enable to map storage structures to UltraRAM "
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src_mat",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst_matx",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst_maty",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_T, ROWS, COLS, NPC> & "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::StereoBM",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::StereoBM",
                                                        "target_domain": "PL",
                                                        "display_name": "StereoBM",
                                                        "brief": "Stereo block matching is a method to estimate the motion of the blocks between the consecutive frames, called stereo pair. The postulate behind this idea is that, considering a stereo pair, the foreground objects will have disparities higher than the background. Local block matching uses the information in the neighboring patch based on the window size, for identifying the conjugate point in its stereo pair. While, the techniques under global method, used the information from the whole image for computing the matching pixel, providing much better accuracy than local methods. But, the efficiency in the global methods are obtained with the cost of resources, which is where local methods stands out. Local block matching algorithm consists of pre-processing and disparity estimation stages. The pre-processing consists of Sobel gradient computation followed by image clipping. And the disparity estimation consists of SAD (Sum of Absolute Difference) computation and obtaining the disparity using winner takes all method (least SAD will be the disparity). Invalidity of the pixel relies upon its uniqueness from the other possible disparities. And the invalid pixels are indicated with the disparity value of zero.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_stereolbm.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "WSIZE",
                                                                                            "type": "int",
                                                                                            "description": " Size of the window used for disparity computation Possible value is 11"
                                                                          },
                                                                          {
                                                                                            "name": "NDISP",
                                                                                            "type": "int",
                                                                                            "description": " Number of disparities Possible value is 32 "
                                                                          },
                                                                          {
                                                                                            "name": "NDISP_UNIT",
                                                                                            "type": "int",
                                                                                            "description": " Number of disparities to be computed in parallel.Possible value is 32 "
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. Only 8-bit, unsigned, 1 channel is    supported (XF_8UC1) ",
                                                                                            "enum": ["XF_8UC1"]
                                                                          },
                                                                          {
                                                                                            "name": "DST_T",
                                                                                            "type": "int",
                                                                                            "description": " Output type. This is XF_16UC1, where the disparities    are arranged in Q12.4 format. ",
                                                                                            "enum": ["XF_16UC1"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible    options are XF_NPPC1 only. ",
                                                                                            "enum": ["XF_NPPC1"]
                                                                          },
                                                                          {
                                                                                            "name": "USE_URAM",
                                                                                            "type": "bool",
                                                                                            "description": " Enable to map some storage structures to UltraRAM "
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_left_mat",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> &"
                                                                          },
                                                                          {
                                                                                            "name": "_right_mat",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> &"
                                                                          },
                                                                          {
                                                                                            "name": "_disp_mat",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<DST_T, ROWS, COLS, NPC> &"
                                                                          },
                                                                          {
                                                                                            "name": "sbmstate",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::xFSBMState<WSIZE,NDISP,NDISP_UNIT> &"
                                                                          }
                                                        ]
                                      }
                    },
   {
                                      "api_name": "xf::cv::SubRS",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::SubRS",
                                                        "target_domain": "PL",
                                                        "display_name": "SubRS",
                                                        "brief": "The SubRS function subtracts the intensity of the source image from a scalar image and stores it in the destination image. dst(I)= scl - src(I)",
                                                        
                                                        "header_file_name": [
                                                                          "core/xf_arithm.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "POLICY_TYPE",
                                                                                            "type": "int",
                                                                                            "description": "Conversion Policy for fixed point arithmetic",
                                                                                            "enum": ["XF_CONVERT_POLICY_SATURATE"]
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input Pixel Type. 8-bit, unsigned, 1 channel is    supported (XF_8UC1). ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. In case of    N-pixel parallelism, width should be multiple of N. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible    options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8    pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src1",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_scl",
                                                                                            "direction": "in",
                                                                                            "type": "unsigned char",
                                                                                            "arrays":[""]
                                                                          },
                                                                          {
                                                                                            "name": "_dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::SubS",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::SubS",
                                                        "target_domain": "PL",
                                                        "display_name": "SubS",
                                                        "brief": "The SubS function subtracts a scalar value from the intensity of source image and stores it in the destination image. dst(I)= src(I) - scl",
                                                        
                                                        "header_file_name": [
                                                                          "core/xf_arithm.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "POLICY_TYPE",
                                                                                            "type": "int",
                                                                                            "description": "Conversion Policy for fixed point arithmetic",
                                                                                            "enum": ["XF_CONVERT_POLICY_SATURATE"]
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input Pixel Type. 8-bit, unsigned, 1 channel is    supported (XF_8UC1). ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. In case of    N-pixel parallelism, width should be multiple of N. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible    options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8    pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src1",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_scl",
                                                                                            "direction": "in",
                                                                                            "type": "unsigned char",
                                                                                            "arrays":[""]
                                                                          },
                                                                          {
                                                                                            "name": "_dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::subtract",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::subtract",
                                                        "target_domain": "PL",
                                                        "display_name": "subtract",
                                                        "brief": "The ``subtract`` function performs the pixel-wise subtraction between two input images and returns the output image. I\\ :sub:`out`\\ (x, y) = I\\ :sub:`in1`\\ (x, y) - I\\ :sub:`in2`\\ (x, y) Where: -  I\\ :sub:`out`\\ (x, y) is the intensity of the output image at (x, y)    position -  I\\ :sub:`in1`\\ (x, y) is the intensity of the first input image at    (x, y) position -  I\\ :sub:`in2`\\ (x, y) is the intensity of the second input image at    (x, y) position. XF_CONVERT_POLICY_TRUNCATE: Results are the least significant bits of the output operand, as if stored in two\u2019s complement binary format in the size of its bit-depth. XF_CONVERT_POLICY_SATURATE: Results are saturated to the bit depth of the output operand.",
                                                        
                                                        "header_file_name": [
                                                                          "core/xf_arithm.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "POLICY_TYPE",
                                                                                            "type": "int",
                                                                                            "description": " Type of overflow handling. It can be either,    XF_CONVERT_POLICY_SATURATE or    XF_CONVERT_POLICY_TRUNCATE. ",
                                                                                            "enum": ["XF_CONVERT_POLICY_SATURATE","XF_CONVERT_POLICY_TRUNCATE"]
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " pixel type. Options are XF_8UC1,XF_8UC3,XF_16SC3    and_16SC1. ",
                                                                                            "enum": ["XF_8UC3", "XF_16SC3", "XF_8UC1", "XF_16SC1"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image (must be a    multiple of 8, for 8-pixel operation) "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible    options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8    pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "src1",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "src2",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC>& "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::sum",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::sum",
                                                        "target_domain": "PL",
                                                        "display_name": "sum",
                                                        "brief": "The sum function calculates the sum of all pixels in input image.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_sum.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. 8-bit, unsigned, 1 channel is    supported (XF_8UC1). ",
                                                                                            "enum": ["XF_8UC3", "XF_8UC1"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image (must be    multiple of 8). "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "src1",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "sum",
                                                                                            "direction": "out",
                                                                                            "type": "double",
                                                                                            "arrays":[""]
                                                                          }
                                                        ]
                                      }
                    },
  {
  
                                      "api_name": "xf::cv::SVM",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::SVM",
                                                        "target_domain": "PL",
                                                        "display_name": "SVM",
                                                        "brief": "The ``SVM`` function is the SVM core operation, which performs dot product between the input arrays. The function returns the resultant dot product value with its fixed point type.",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_svm.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC1_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. 16-bit, signed, 1 channel (XF_16SC1)    is supported. ",
                                                                                            "enum": ["XF_16SC1"]
                                                                          },
                                                                          {
                                                                                            "name": "SRC2_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. 16-bit, signed, 1 channel (XF_16SC1)    is supported. ",
                                                                                            "enum": ["XF_16SC1"]
                                                                          },
                                                                          {
                                                                                            "name": "DST_WIDTH",
                                                                                            "type": "int",
                                                                                            "description": "Pixel width of output image pointer. Must be power of 2. "
                                                                          },
                                                                          {
                                                                                            "name": "ROWS1",
                                                                                            "type": "int",
                                                                                            "description": " Number of rows in the first image being processed.Possible value is 200 "
                                                                          },
                                                                          {
                                                                                            "name": "COLS1",
                                                                                            "type": "int",
                                                                                            "description": " Number of columns in the first image being processed.Possible value is 200 "
                                                                          },
                                                                          {
                                                                                            "name": "ROWS2",
                                                                                            "type": "int",
                                                                                            "description": " Number of rows in the second image being processed.Possible value is 200 "
                                                                          },
                                                                          {
                                                                                            "name": "COLS2",
                                                                                            "type": "int",
                                                                                            "description": " Number of columns in the second image being processed.Possible value is 200 "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible    options are XF_NPPC1. ",
                                                                                            "enum": ["XF_NPPC1"]
                                                                          },
                                                                          {
                                                                                            "name": "N",
                                                                                            "type": "int",
                                                                                            "description": "Max number of kernel operations.Possible value is 200 "
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "in_1",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC1_T, ROWS1, COLS1, NPC> &"
                                                                          },
                                                                          {
                                                                                            "name": "in_2",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC2_T, ROWS2, COLS2, NPC> &"
                                                                          },
                                                                          {
                                                                                            "name": "idx1",
                                                                                            "direction": "in",
                                                                                            "type": "uint16_t"
                                                                          },
                                                                          {
                                                                                            "name": "idx2",
                                                                                            "direction": "in",
                                                                                            "type": "uint16_t"
                                                                          },
                                                                          {
                                                                                            "name": "frac1",
                                                                                            "direction": "in",
                                                                                            "type": "uchar_t"
                                                                          },
                                                                          {
                                                                                            "name": "frac2",
                                                                                            "direction": "in",
                                                                                            "type": "uchar_t"
                                                                          },
                                                                          {
                                                                                            "name": "n",
                                                                                            "direction": "in",
                                                                                            "type": "uint16_t"
                                                                          },
                                                                          {
                                                                                            "name": "out_frac",
                                                                                            "direction": "in",
                                                                                            "type": "uchar_t *"
                                                                          },
                                                                          {
                                                                                            "name": "result",
                                                                                            "direction": "out",
                                                                                            "type": "ap_int<DST_WIDTH> *"
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::Threshold",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::Threshold",
                                                        "target_domain": "PL",
                                                        "display_name": "Threshold",
                                                        "brief": "The ``Threshold`` function performs thresholding operation on the input image. There are several types of thresholding supported by the function. .. figure:: ./images/uln1554997116867.png    :alt:     :figclass: image    :name: uti1504034282636__image_dsp_fd5_xfb .. figure:: ./images/tst1554997064684.png    :alt:     :figclass: image    :name: uti1504034282636__image_lwp_kd5_xfb .. figure:: ./images/ktk1554997270016.png    :alt:     :figclass: image    :name: uti1504034282636__image_twr_4d5_xfb .. figure:: ./images/efs1554997278968.png    :alt:     :figclass: image    :name: uti1504034282636__image_qqd_5d5_xfb .. figure:: ./images/rkl1554997109351.png    :alt:     :figclass: image    :name: uti1504034282636__image_f33_yd5_xfb",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_threshold.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "THRESHOLD_TYPE",
                                                                                            "type": "int",
                                                                                            "description": "Type of thresholding.",
                                                                                            "enum":["XF_THRESHOLD_TYPE_BINARY ","XF_THRESHOLD_TYPE_BINARY_INV ","XF_THRESHOLD_TYPE_TRUNC ","XF_THRESHOLD_TYPE_TOZERO ","XF_THRESHOLD_TYPE_TOZERO_INV"]
                                                                          },
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. Only 8-bit, unsigned, 1 channel is    supported (XF_8UC1). ",
                                                                                            "enum": ["XF_8UC1"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. Must be    multiple of 8, for 8-pixel operation. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src_mat",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst_mat",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "thresh",
                                                                                            "direction": "in",
                                                                                            "type": "short int"
                                                                          },
                                                                          {
                                                                                            "name": "maxval",
                                                                                            "direction": "in",
                                                                                            "type": "short int"
                                                                          }
                                                        ]
                                      }
                    },
                    {
                                    "api_name": "xf::cv::LTM",
                                      "target_domain": "PL",
                                    "spec": {
                                                    "schema": "vitis_libraries_api_list_schema-1.0",
                                                    "api_name": "xf::cv::LTM",
                                      "target_domain": "PL",
                                                    "display_name": "LTM",
                                                    "brief": "Most of the display devices have limited dynamic range. Hence images with wide dynamic range cannot be seen natively on such devices. To see wide dynamic range images on devices with low dynamic range, we need to compress the wide dynamic range of image to a low dynamic range. This process is called as tone-mapping. Local tone mapping takes pixel neighbor statistics into account, and produces images with more contrast and brightness.This implementaion is based on the algorithm proposed by J. Yang, A. Hore and O. Yadid-Pecht.",
                                                    
                                                    "header_file_name": [
                                                                        "imgproc/xf_ltm.hpp"
                                                    ],
                                                    "search_paths": [
                                                                        "L1/include/"
                                                    ],
                                                    "instance": "function",
                                                    "parameters": [
                                                                        {
                                                                                        "name": "IN_TYPE",
                                                                                        "type": "int",
                                                                                        "description": "Input pixel type. The current supported pixel value is XF_8UC3 XF_10UC3, XF_12UC3, XF_16UC3, XF_32FC3",
                                                                                        "enum": ["XF_8UC3", "XF_16UC3"]
                                                                        },
                                                                        {
                                                                                        "name": "OUT_TYPE",
                                                                                        "type": "int",
                                                                                        "description": "Input pixel type. The current supported pixel value is XF_8UC3, XF_10UC3, XF_12UC3, XF_16UC3",
                                                                                        "enum": ["XF_8UC3", "XF_16UC3"]
                                                                        },
                                                                        {
                                                                                        "name": "BLK_ROWS",
                                                                                        "type": "int",
                                                                                        "description": "Max block height the image is divided into. This can be any positive integer greater than or equal to 32 and less than input image height."
                                                                        },
                                                                        {
                                                                                        "name": "BLK_COLS",
                                                                                        "type": "int",
                                                                                        "description": "Max block width the image is divided into. This can be any positive integer greater than or equal to 32 and less than input image width."
                                                                        },
                                                                        {
                                                                                        "name": "ROWS",
                                                                                        "type": "int",
                                                                                        "minimum": 16,
                                                                                        "maximum": 2160,
                                                                                        "description": " Maximum height of the image (Must be multiple of NPC)"
                                                                        },
                                                                        {
                                                                                        "name": "COLS",
                                                                                        "type": "int",
                                                                                        "minimum": 16,
                                                                                        "maximum": 3840,
                                                                                        "description": " Maximum width of the image (Must be multiple of NPC)"
                                                                        },
                                                                        {
                                                                                        "name": "NPC",
                                                                                        "type": "int",
                                                                                        "description": "Number of pixels to process per cycle. Supported values are XF_NPPC1, XF_NPPC2, XF_NPPC4, XF_NPPC8.",
                                                                                        "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                        }
                                                    ],
                                                    "ports": [
                                                                        {
                                                                                        "name": "in",
                                                                                        "direction": "in",
                                                                                        "type": "xf::cv::Mat<IN_TYPE, ROWS, COLS, NPC>&"
                                                                        },
                                                                        {
                                                                                        "name": "block_rows",
                                                                                        "direction": "in",
                                                                                        "type": "int"
                                                                        },
                                                                        {
                                                                                        "name": "block_cols",
                                                                                        "direction": "in",
                                                                                        "type": "int"
                                                                        },
                                                                        {
                                                                                        "name": "omin_r",
                                                                                        "direction": "in",
                                                                                        "type": "XF_CTUNAME(IN_TYPE, NPC) ",
                                                                                        "arrays":["LTMTile<BLK_ROWS, BLK_COLS, ROWS, COLS, NPC>::MinMaxVArrSize","LTMTile<BLK_ROWS, BLK_COLS, ROWS, COLS, NPC>::MinMaxHArrSize"]
                                                                        },
                                                                        {
                                                                                        "name": "omax_r",
                                                                                        "direction": "in",
                                                                                        "type": "XF_CTUNAME(IN_TYPE, NPC) ",
                                                                                        "arrays":["LTMTile<BLK_ROWS, BLK_COLS, ROWS, COLS, NPC>::MinMaxVArrSize","LTMTile<BLK_ROWS, BLK_COLS, ROWS, COLS, NPC>::MinMaxHArrSize"]
                                                                        },
                                                                        {
                                                                                        "name": "omin_w",
                                                                                        "direction": "in",
                                                                                        "type": "XF_CTUNAME(IN_TYPE, NPC) ",
                                                                                        "arrays":["LTMTile<BLK_ROWS, BLK_COLS, ROWS, COLS, NPC>::MinMaxVArrSize","LTMTile<BLK_ROWS, BLK_COLS, ROWS, COLS, NPC>::MinMaxHArrSize"]
                                                                        },
                                                                        {
                                                                                        "name": "omax_w",
                                                                                        "direction": "in",
                                                                                        "type": "XF_CTUNAME(IN_TYPE, NPC)",
                                                                                        "arrays":["LTMTile<BLK_ROWS, BLK_COLS, ROWS, COLS, NPC>::MinMaxVArrSize","LTMTile<BLK_ROWS, BLK_COLS, ROWS, COLS, NPC>::MinMaxHArrSize"]
                                                                        },
                                                                        {
                                                                                        "name": "out",
                                                                                        "direction": "out",
                                                                                        "type": "xf::cv::Mat<OUT_TYPE, ROWS, COLS, NPC>&"
                                                                        }
                                                    ]
                                    }
                    },
  {
                                      "api_name": "xf::cv::warpTransform",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::warpTransform",
                                                        "target_domain": "PL",
                                                        "display_name": "warpTransform",
                                                        "brief": "The ``warpTransform`` function is designed to perform the perspective and affine geometric transformations on an image. The type of transform is a compile time parameter to the function. The function uses a streaming interface to perform the transformation. Due to this and due to the fact that geometric transformations need access to many different rows of input data to compute one output row, the function stores some rows of the input data in block RAMs/UltraRAMs. The number of rows the function stores can be configured by the user by modifying a template parameter. Based on the transformation matrix, you can decide on the number of rows to be stored. You can also choose when to start transforming the input image in terms of the number of rows of stored image. Affine Transformation The transformation matrix consists of size parameters, and is as shown: |image156| Affine transformation is applied in the warpTransform function following the equation: |image157| Perspective Transformation The transformation matrix is a 3x3 matrix as shown below: |image158| Perspective transformation is applied in warpTransform following the equation: |image159| The destination pixel is then computed by dividing the first two dimensions of the dst1 by the third dimension |image160|",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_warp_transform.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "STORE_LINES",
                                                                                            "type": "int",
                                                                                            "description": " Number of lines to store an input to process a given    transformation."
                                                                          },
                                                                          {
                                                                                            "name": "START_ROW",
                                                                                            "type": "int",
                                                                                            "description": " Number of the input rows to store before starting the    image transformation. This must be less than or equal    to STORE_LINES. "
                                                                          },
                                                                          {
                                                                                            "name": "TRANSFORM",
                                                                                            "type": "int",
                                                                                            "description": "Affine and perspective transformations are supported. Set this flag to ‘0’ for affine and ‘1’ for perspective transformation."
                                                                          },
                                                                          {
                                                                                            "name": "INTERPOLATION_TYPE",
                                                                                            "type": "bool",
                                                                                            "description": "Set flag to ‘1’ for bilinear interpolation and ‘0’ for nearest neighbor interpolation."
                                                                          },
                                                                          {
                                                                                            "name": "TYPE",
                                                                                            "type": "int",
                                                                                            "description": " Input and Output pixel type. Only 8-bit, unsigned, 1    and 3 channels are supported (XF_8UC1 and XF_8UC3) ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; only    one-pixel operation supported (XF_NPPC1). ",
                                                                                            "enum": ["XF_NPPC1"]
                                                                          },
                                                                          {
                                                                                            "name": "USE_URAM",
                                                                                            "type": "bool",
                                                                                            "description": " Enable to map some storage structures to UltraRAM "
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src_mat",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<TYPE, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst_mat",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<TYPE, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "P_matrix",
                                                                                            "direction": "in",
                                                                                            "type": "float",
                                                                                            "arrays":["9"]
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::xf_QuatizationDithering",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::xf_QuatizationDithering",
                                                        "target_domain": "PL",
                                                        "display_name": "xf_QuatizationDithering",
                                                        "brief": "This algorithm dithers input image using Floyd-Steinberg dithering method. It is commonly used by image manipulation software, for example when an image is converted into GIF format each pixel intensity value is quantized to 8 bit i.e. 256 colors. ",
                                                        
                                                        "header_file_name": [
                                                                          "imgproc/xf_quantizationdithering.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "IN_TYPE",
                                                                                            "type": "int",
                                                                                            "description": " Input pixel type. It should be XF_8UC1, XF_8UC3,    XF_10UC1, XF_10UC3, XF_12UC1, XF_12UC3, XF_16UC1,    or XF_16UC3. Note XF_<PIXEL_BITWIDTH>UC<NUM_CHANNELS>",
                                                                                            "enum": ["XF_8UC3", "XF_16UC3", "XF_8UC1", "XF_16UC1"]
                                                                          },
                                                                          {
                                                                                            "name": "OUT_TYPE",
                                                                                            "type": "int",
                                                                                            "description": " Output pixel type. It should be XF_8UC1, XF_8UC3,    XF_10UC1, XF_10UC3, XF_12UC1, XF_12UC3, XF_16UC1,    or XF_16UC3. Output PIXEL_WIDTH should less than or    equal to input PIXEL_BITWIDTH ",
                                                                                            "enum": ["XF_8UC3", "XF_16UC3", "XF_8UC1", "XF_16UC1"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. In case of    N-pixel parallelism, width should be multiple of N. "
                                                                          },
                                                                          {
                                                                                            "name": "SCALE_FACTOR",
                                                                                            "type": "int",
                                                                                            "description": " The SCALE_FACTOR must be power of 2 & less than or    equal to 2^(output PIXEL_BITWIDTH) "
                                                                          },
                                                                          {
                                                                                            "name": "MAX_REPRESENTED_VALUE",
                                                                                            "type": "int",
                                                                                            "description": " The MAX_REPRESENTED_VALUE must be equal to    equal to 2^(input PIXEL_BITWIDTH) "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible    options is XF_NPPC1 or XF_NPPC2 ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC2"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "stream_in",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<IN_TYPE, ROWS, COLS, NPC>& "
                                                                          },
                                                                          {
                                                                                            "name": "stream_out",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<OUT_TYPE, ROWS, COLS, NPC>& "
                                                                          }
                                                        ]
                                      }
                    },
  {
                                      "api_name": "xf::cv::zero",
                                      "target_domain": "PL",
                                      "spec": {
                                                        "schema": "vitis_libraries_api_list_schema-1.0",
                                                        "api_name": "xf::cv::zero",
                                                        "target_domain": "PL",
                                                        "display_name": "zero",
                                                        "brief": "The Zero function sets the each pixel in input image to zero and stores the result in dst.",
                                                        
                                                        "header_file_name": [
                                                                          "core/xf_arithm.hpp"
                                                        ],
                                                        "search_paths": [
                                                                          "L1/include/"
                                                        ],
                                                        "instance": "function",
                                                        "parameters": [
                                                                          {
                                                                                            "name": "SRC_T",
                                                                                            "type": "int",
                                                                                            "description": " Input Pixel Type. 8-bit, unsigned, 1 channel is    supported (XF_8UC1). ",
                                                                                            "enum": ["XF_8UC1", "XF_8UC3"]
                                                                          },
                                                                          {
                                                                                            "name": "ROWS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 2160,
                                                                                            "description": " Maximum height of input and output image. "
                                                                          },
                                                                          {
                                                                                            "name": "COLS",
                                                                                            "type": "int",
                                                                                            "minimum": 16,
                                                                                            "maximum": 3840,
                                                                                            "description": " Maximum width of input and output image. In case of    N-pixel parallelism, width should be multiple of N. "
                                                                          },
                                                                          {
                                                                                            "name": "NPC",
                                                                                            "type": "int",
                                                                                            "description": " Number of pixels to be processed per cycle; possible    options are XF_NPPC1 and XF_NPPC8 for 1 pixel and 8    pixel operations respectively. ",
                                                                                            "enum": ["XF_NPPC1", "XF_NPPC8"]
                                                                          }
                                                        ],
                                                        "ports": [
                                                                          {
                                                                                            "name": "_src1",
                                                                                            "direction": "in",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          },
                                                                          {
                                                                                            "name": "_dst",
                                                                                            "direction": "out",
                                                                                            "type": "xf::cv::Mat<SRC_T, ROWS, COLS, NPC> & "
                                                                          }
                                                        ]
                                      }
                    }	
    

  
  ]
}
